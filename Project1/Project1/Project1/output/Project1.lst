FILE: .\boot.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#895 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.18
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0002: 30       HALT                     
0003: 30       HALT                     
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0005: 30       HALT                     
0006: 30       HALT                     
0007: 30       HALT                     
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
0009: 30       HALT                     
000A: 30       HALT                     
000B: 30       HALT                     
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
000D: 30       HALT                     
000E: 30       HALT                     
000F: 30       HALT                     
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0011: 30       HALT                     
0012: 30       HALT                     
0013: 30       HALT                     
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0015: 30       HALT                     
0016: 30       HALT                     
0017: 30       HALT                     
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
0019: 30       HALT                     
001A: 30       HALT                     
001B: 30       HALT                     
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
001D: 30       HALT                     
001E: 30       HALT                     
001F: 30       HALT                     
0020: 7D 07 18 LJMP  0x0718             (0145)     ljmp	_Counter8_1_ISR
0023: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 06 CD LJMP  0x06CD             (0149)     ljmp	_Counter8_2_ISR
0027: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0153)     // call	void_handler
0028: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0157)     // call	void_handler
0029: 30       HALT                     
002A: 30       HALT                     
002B: 30       HALT                     
002C: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
002D: 30       HALT                     
002E: 30       HALT                     
002F: 30       HALT                     
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0031: 30       HALT                     
0032: 30       HALT                     
0033: 30       HALT                     
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0035: 30       HALT                     
0036: 30       HALT                     
0037: 30       HALT                     
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
0039: 30       HALT                     
003A: 30       HALT                     
003B: 30       HALT                     
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
003D: 30       HALT                     
003E: 30       HALT                     
003F: 30       HALT                     
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0041: 30       HALT                     
0042: 30       HALT                     
0043: 30       HALT                     
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0045: 30       HALT                     
0046: 30       HALT                     
0047: 30       HALT                     
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
0049: 30       HALT                     
004A: 30       HALT                     
004B: 30       HALT                     
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
004D: 30       HALT                     
004E: 30       HALT                     
004F: 30       HALT                     
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0051: 30       HALT                     
0052: 30       HALT                     
0053: 30       HALT                     
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0055: 30       HALT                     
0056: 30       HALT                     
0057: 30       HALT                     
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
0059: 30       HALT                     
005A: 30       HALT                     
005B: 30       HALT                     
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0209)     // call	void_handler
005D: 30       HALT                     
005E: 30       HALT                     
005F: 30       HALT                     
0060: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0061: 30       HALT                     
0062: 30       HALT                     
0063: 30       HALT                     
0064: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
0065: 30       HALT                     
0066: 30       HALT                     
0067: 30       HALT                     
0068: 71 10    OR    F,0x10             (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0249)     M8C_EnableWatchDog
                                        (0250) ENDIF
                                        (0251) 
                                        (0252) IF ( SELECT_32K )
                                        (0253)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0254) ELSE
007B: 41 FE FB AND   REG[0xFE],0xFB     (0255)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0256) ENDIF
                                        (0257) 
                                        (0258)     ;---------------------------
                                        (0259)     ; Set up the Temporary stack
                                        (0260)     ;---------------------------
                                        (0261)     ; A temporary stack is set up for the SSC instructions.
                                        (0262)     ; The real stack start will be assigned later.
                                        (0263)     ;
                                        (0264) _stack_start:          equ 80h
007E: 50 80    MOV   A,0x80             (0265)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0080: 4E       SWAP  SP,A               (0266)     swap  SP, A                    ; This is only temporary if going to LMM
                                        (0267) 
                                        (0268)     ;-----------------------------------------------
                                        (0269)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0270)     ;-----------------------------------------------
                                        (0271) 
                                        (0272) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0273)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0274)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0275)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0276)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0277)   IF ( AGND_BYPASS )
                                        (0278)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0279)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0280)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0281)     ; value using the proper trim values.
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0284)   ENDIF
                                        (0285)  ENDIF
                                        (0286) ENDIF ; 5.0 V Operation
                                        (0287) 
                                        (0288) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0289)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0290)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0291)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0292)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0293)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ENDIF
                                        (0295) ENDIF ; 3.3 Volt Operation
                                        (0296) 
0081: 55 F8 00 MOV   [iles+233],0x0     (0297)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0084: 55 F9 00 MOV   [iles+234],0x0     (0298)     mov  [bSSC_KEYSP], 0
                                        (0299) 
                                        (0300)     ;---------------------------------------
                                        (0301)     ; Initialize Crystal Oscillator and PLL
                                        (0302)     ;---------------------------------------
                                        (0303) 
                                        (0304) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0305)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0306)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0307)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0308)     ; the ECO to stabilize.
                                        (0309)     ;
                                        (0310)     M8C_SetBank1
                                        (0311)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0312)     M8C_SetBank0
                                        (0313)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0314)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0315)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0316) .WaitFor1s:
                                        (0317)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0318)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0319)                                           ;   since interrupts are not globally enabled
                                        (0320) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0321)     ; Either no ECO, or waiting for stable clock is to be done in main
0087: 71 10    OR    F,0x10             (0322)     M8C_SetBank1
0089: 62 E0 12 MOV   REG[0xE0],0x12     (0323)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
008C: 70 EF    AND   F,0xEF             (0324)     M8C_SetBank0
008E: 62 E3 38 MOV   REG[0xE3],0x38     (0325)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0326) 
                                        (0327) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0328) 
                                        (0329) IF ( PLL_MODE )
                                        (0330)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0331)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0332)     ;
                                        (0333)     M8C_SetBank1
                                        (0334)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0335)     M8C_SetBank0
                                        (0336)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0337)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0338) 
                                        (0339) .WaitFor16ms:
                                        (0340)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0341)     jz   .WaitFor16ms
                                        (0342)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0343)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0344)     M8C_SetBank0
                                        (0345) 
                                        (0346) IF      ( WAIT_FOR_32K )
                                        (0347) ELSE ; !( WAIT_FOR_32K )
                                        (0348)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0349)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0350) ENDIF ;(WAIT_FOR_32K)
                                        (0351) ENDIF ;(PLL_MODE)
                                        (0352) 
                                        (0353)     ;------------------------
                                        (0354)     ; Close CT leakage path.
                                        (0355)     ;------------------------
0091: 62 71 05 MOV   REG[0x71],0x5      (0356)     mov   reg[ACB00CR0], 05h
0094: 62 75 05 MOV   REG[0x75],0x5      (0357)     mov   reg[ACB01CR0], 05h
0097: 62 79 05 MOV   REG[0x79],0x5      (0358)     mov   reg[ACB02CR0], 05h
009A: 62 7D 05 MOV   REG[0x7D],0x5      (0359)     mov   reg[ACB03CR0], 05h
                                        (0360) 
                                        (0361) 
                                        (0362) IF	(TOOLCHAIN & HITECH)
                                        (0363)     ;---------------------------------------------
                                        (0364)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0365)     ;---------------------------------------------
                                        (0366) 	global		__Lstackps
                                        (0367) 	mov     a,low __Lstackps
                                        (0368) 	swap    a,sp
                                        (0369) 
                                        (0370) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0371)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0372)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0373)     RAM_SETPAGE_CUR 0
                                        (0374)     RAM_SETPAGE_MVW 0
                                        (0375)     RAM_SETPAGE_MVR 0
                                        (0376)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0377)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0378)     ELSE
                                        (0379)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0380)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0381) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0382) ELSE
                                        (0383)     ;---------------------------------------------
                                        (0384)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0385)     ;---------------------------------------------
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
009D: 62 D1 07 MOV   REG[0xD1],0x7      (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A0: 50 00    MOV   A,0x0              (0388)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A2: 4E       SWAP  SP,A               (0389)     swap  A, SP
00A3: 62 D3 07 MOV   REG[0xD3],0x7      (0390)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00A6: 62 D0 00 MOV   REG[0xD0],0x0      (0391)     RAM_SETPAGE_CUR 0
00A9: 62 D5 00 MOV   REG[0xD5],0x0      (0392)     RAM_SETPAGE_MVW 0
00AC: 62 D4 00 MOV   REG[0xD4],0x0      (0393)     RAM_SETPAGE_MVR 0
                                        (0394) 
                                        (0395)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00AF: 71 C0    OR    F,0xC0             (0396)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0397)   ELSE
                                        (0398)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0399)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0400) ELSE
                                        (0401)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0402)     swap  SP, A
                                        (0403) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0404) ENDIF ;	TOOLCHAIN
                                        (0405) 
                                        (0406)     ;-------------------------
                                        (0407)     ; Load Base Configuration
                                        (0408)     ;-------------------------
                                        (0409)     ; Load global parameter settings and load the user modules in the
                                        (0410)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0411)     ; to minimize start up time; (2) We may still need to play with the
                                        (0412)     ; Sleep Timer.
                                        (0413)     ;
00B1: 7C 03 19 LCALL 0x0319             (0414)     lcall LoadConfigInit
                                        (0415) 
                                        (0416)     ;-----------------------------------
                                        (0417)     ; Initialize C Run-Time Environment
                                        (0418)     ;-----------------------------------
                                        (0419) IF ( C_LANGUAGE_SUPPORT )
                                        (0420) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0421)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0422)     mov  [__r0],<__bss_start
                                        (0423) BssLoop:
                                        (0424)     cmp  [__r0],<__bss_end
                                        (0425)     jz   BssDone
                                        (0426)     mvi  [__r0],A
                                        (0427)     jmp  BssLoop
                                        (0428) BssDone:
                                        (0429)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0430)     mov  X,<__idata_start
                                        (0431)     mov  [__r0],<__data_start
                                        (0432) IDataLoop:
                                        (0433)     cmp  [__r0],<__data_end
                                        (0434)     jz   C_RTE_Done
                                        (0435)     push A
                                        (0436)     romx
                                        (0437)     mvi  [__r0],A
                                        (0438)     pop  A
                                        (0439)     inc  X
                                        (0440)     adc  A,0
                                        (0441)     jmp  IDataLoop
                                        (0442) 
                                        (0443) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0444) 
                                        (0445) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B4: 62 D0 00 MOV   REG[0xD0],0x0      (0446)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0447)                                        ; to use the Virtual Register page.
                                        (0448) 
                                        (0449)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0450)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0451)     ; text segment and may have been relocated by the Code Compressor.
                                        (0452)     ;
00B7: 50 03    MOV   A,0x3              (0453)     mov   A, >__pXIData                ; Get the address of the flash
00B9: 57 17    MOV   X,0x17             (0454)     mov   X, <__pXIData                ;   pointer to the xidata area.
00BB: 08       PUSH  A                  (0455)     push  A
00BC: 28       ROMX                     (0456)     romx                               ; get the MSB of xidata's address
00BD: 53 05    MOV   [__r0],A           (0457)     mov   [__r0], A
00BF: 18       POP   A                  (0458)     pop   A
00C0: 75       INC   X                  (0459)     inc   X
00C1: 09 00    ADC   A,0x0              (0460)     adc   A, 0
00C3: 28       ROMX                     (0461)     romx                               ; get the LSB of xidata's address
00C4: 4B       SWAP  A,X                (0462)     swap  A, X
00C5: 51 05    MOV   A,[__r0]           (0463)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0464)                                        ;   XIData structure list in flash
00C7: 80 04    JMP   0x00CC             (0465)     jmp   .AccessStruct
                                        (0466) 
                                        (0467)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0468)     ; values of C variables. Each structure contains 3 member elements.
                                        (0469)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0470)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0471)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0472)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0473)     ; value in the second member element, an unsigned byte:
                                        (0474)     ; (1) If the value of the second element is non-zero, it represents
                                        (0475)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0476)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0477)     ; the bytes are copied to the block of RAM.
                                        (0478)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0479)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0480)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0481) 
                                        (0482) .AccessNextStructLoop:
00C9: 75       INC   X                  (0483)     inc   X                            ; pXIData++
00CA: 09 00    ADC   A,0x0              (0484)     adc   A, 0
                                        (0485) .AccessStruct:                         ; Entry point for first block
                                        (0486)     ;
                                        (0487)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0488)     ;
00CC: 62 E3 00 MOV   REG[0xE3],0x0      (0489)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00CF: 08       PUSH  A                  (0490)     push  A
00D0: 28       ROMX                     (0491)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D1: 60 D5    MOV   REG[0xD5],A        (0492)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D3: 74       INC   A                  (0493)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D4: A0 4B    JZ    0x0120             (0494)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D6: 18       POP   A                  (0495)     pop   A                            ; restore pXIData to [A,X]
00D7: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00D8: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00DA: 08       PUSH  A                  (0498)     push  A
00DB: 28       ROMX                     (0499)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00DC: 53 05    MOV   [__r0],A           (0500)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00DE: 18       POP   A                  (0501)     pop   A                            ; restore pXIData to [A,X]
00DF: 75       INC   X                  (0502)     inc   X                            ; pXIData++ (point to size)
00E0: 09 00    ADC   A,0x0              (0503)     adc   A, 0
00E2: 08       PUSH  A                  (0504)     push  A
00E3: 28       ROMX                     (0505)     romx                               ; Get the size (CPU.A <- *pXIData)
00E4: A0 1C    JZ    0x0101             (0506)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E6: 53 04    MOV   [__r1],A           (0507)     mov   [__r1], A                    ;             else downcount in __r1
00E8: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
                                        (0509) 
                                        (0510) .CopyNextByteLoop:
                                        (0511)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0512)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0513)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0514)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0515)     ;
00E9: 75       INC   X                  (0516)     inc   X                            ; pXIData++ (point to next data byte)
00EA: 09 00    ADC   A,0x0              (0517)     adc   A, 0
00EC: 08       PUSH  A                  (0518)     push  A
00ED: 28       ROMX                     (0519)     romx                               ; Get the data value (CPU.A <- *pXIData)
00EE: 3F 05    MVI   [__r0],A           (0520)     mvi   [__r0], A                    ; Transfer the data to RAM
00F0: 47 05 FF TST   [__r0],0xFF        (0521)     tst   [__r0], 0xff                 ; Check for page crossing
00F3: B0 06    JNZ   0x00FA             (0522)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F5: 5D D5    MOV   A,REG[0xD5]        (0523)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00F7: 74       INC   A                  (0524)     inc   A
00F8: 60 D5    MOV   REG[0xD5],A        (0525)     mov   reg[ MVW_PP], A
                                        (0526) .CopyLoopTail:
00FA: 18       POP   A                  (0527)     pop   A                            ; restore pXIData to [A,X]
00FB: 7A 04    DEC   [__r1]             (0528)     dec   [__r1]                       ; End of this array in flash?
00FD: BF EB    JNZ   0x00E9             (0529)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00FF: 8F C9    JMP   0x00C9             (0530)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0531) 
                                        (0532) .ClearRAMBlockToZero:
0101: 18       POP   A                  (0533)     pop   A                            ; restore pXIData to [A,X]
0102: 75       INC   X                  (0534)     inc   X                            ; pXIData++ (point to next data byte)
0103: 09 00    ADC   A,0x0              (0535)     adc   A, 0
0105: 08       PUSH  A                  (0536)     push  A
0106: 28       ROMX                     (0537)     romx                               ; Get the run length (CPU.A <- *pXIData)
0107: 53 04    MOV   [__r1],A           (0538)     mov   [__r1], A                    ; Initialize downcounter
0109: 50 00    MOV   A,0x0              (0539)     mov   A, 0                         ; Initialize source data
                                        (0540) 
                                        (0541) .ClearRAMBlockLoop:
                                        (0542)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0543)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0544)     ;
010B: 3F 05    MVI   [__r0],A           (0545)     mvi   [__r0], A                    ; Clear a byte
010D: 47 05 FF TST   [__r0],0xFF        (0546)     tst   [__r0], 0xff                 ; Check for page crossing
0110: B0 08    JNZ   0x0119             (0547)     jnz   .ClearLoopTail               ;   No crossing, keep going
0112: 5D D5    MOV   A,REG[0xD5]        (0548)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0114: 74       INC   A                  (0549)     inc   A
0115: 60 D5    MOV   REG[0xD5],A        (0550)     mov   reg[ MVW_PP], A
0117: 50 00    MOV   A,0x0              (0551)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0552) .ClearLoopTail:
0119: 7A 04    DEC   [__r1]             (0553)     dec   [__r1]                       ; Was this the last byte?
011B: BF EF    JNZ   0x010B             (0554)     jnz   .ClearRAMBlockLoop           ;   No,  continue
011D: 18       POP   A                  (0555)     pop   A                            ;   Yes, restore pXIData to [A,X] and
011E: 8F AA    JMP   0x00C9             (0556)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0557) 
                                        (0558) .C_RTE_WrapUp:
0120: 18       POP   A                  (0559)     pop   A                            ; balance stack
                                        (0560) 
                                        (0561) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0562) 
                                        (0563) C_RTE_Done:
                                        (0564) 
                                        (0565) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0566) 
                                        (0567)     ;-------------------------------
                                        (0568)     ; Voltage Stabilization for SMP
                                        (0569)     ;-------------------------------
                                        (0570) 
                                        (0571) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0572) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0573)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0574)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0575)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0576)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0577)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0578)     M8C_SetBank1
                                        (0579)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0580)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0581)     M8C_SetBank0
                                        (0582)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0583)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0584) .WaitFor2ms:
                                        (0585)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0586)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0587) ENDIF ; SMP is operational
                                        (0588) ENDIF ; 5.0V Operation
                                        (0589) 
                                        (0590)     ;-------------------------------
                                        (0591)     ; Set Power-On Reset (POR) Level
                                        (0592)     ;-------------------------------
                                        (0593) 
                                        (0594)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0595)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0596)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0597)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0598)     ;  lead to corruption of PSoC flash.
                                        (0599) 
0121: 71 10    OR    F,0x10             (0600)     M8C_SetBank1
                                        (0601) 
                                        (0602) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0603)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0604)  ELSE                                       ;    No, fast mode
                                        (0605)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0606)                                             ;       no, set midpoint POR in user code, if desired
                                        (0607)   ELSE ; 24HMz                              ;
0123: 43 E3 20 OR    REG[0xE3],0x20     (0608)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0609)   ENDIF ; 24MHz
                                        (0610)  ENDIF ; Slow Mode
                                        (0611) ENDIF ; 5.0V Operation
                                        (0612) 
0126: 70 EF    AND   F,0xEF             (0613)     M8C_SetBank0
                                        (0614) 
                                        (0615)     ;----------------------------
                                        (0616)     ; Wrap up and invoke "main"
                                        (0617)     ;----------------------------
                                        (0618) 
                                        (0619)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0620)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0621)     ;
0128: 62 E0 00 MOV   REG[0xE0],0x0      (0622)     mov  reg[INT_MSK0],0
                                        (0623) 
                                        (0624)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0625)     ; And put decimator in full mode so it does not consume too much current.
                                        (0626)     ;
012B: 71 10    OR    F,0x10             (0627)     M8C_SetBank1
012D: 62 E0 13 MOV   REG[0xE0],0x13     (0628)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0130: 43 E7 80 OR    REG[0xE7],0x80     (0629)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0133: 70 EF    AND   F,0xEF             (0630)     M8C_SetBank0
                                        (0631) 
                                        (0632)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0633)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0634)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0635)     ;
0135: 62 E2 00 MOV   REG[0xE2],0x0      (0636)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0637)                                    ; have been set during the boot process.
                                        (0638) IF	(TOOLCHAIN & HITECH)
                                        (0639) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0640) ELSE
                                        (0641) IF ENABLE_LJMP_TO_MAIN
                                        (0642)     ljmp  _main                    ; goto main (no return)
                                        (0643) ELSE
0138: 7C 07 DE LCALL _main              (0644)     lcall _main                    ; call main
                                        (0645) .Exit:
013B: 8F FF    JMP   0x013B             (0646)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0647) ENDIF
                                        (0648) ENDIF ; TOOLCHAIN
                                        (0649) 
                                        (0650)     ;---------------------------------
                                        (0651)     ; Library Access to Global Parms
                                        (0652)     ;---------------------------------
                                        (0653)     ;
                                        (0654)  bGetPowerSetting:
                                        (0655) _bGetPowerSetting:
                                        (0656)     ; Returns value of POWER_SETTING in the A register.
                                        (0657)     ; No inputs. No Side Effects.
                                        (0658)     ;
013D: 50 10    MOV   A,0x10             (0659)     mov   A, POWER_SETTING
013F: 7F       RET                      (0660)     ret
(0661) 
(0662) IF	(TOOLCHAIN & HITECH)
(0663) ELSE
(0664)     ;---------------------------------
(0665)     ; Order Critical RAM & ROM AREAs
(0666)     ;---------------------------------
(0667)     ;  'TOP' is all that has been defined so far...
(0668) 
(0669)     ;  ROM AREAs for C CONST, static & global items
(0670)     ;
(0671)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
(0672)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
(0673) __idata_start:
(0674) 
(0675)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
(0676) __func_lit_start:
(0677) 
(0678) IF ( SYSTEM_LARGE_MEMORY_MODEL )
(0679)     ; We use the func_lit area to store a pointer to extended initialized
(0680)     ; data (xidata) area that follows the text area. Func_lit isn't
(0681)     ; relocated by the code compressor, but the text area may shrink and
(0682)     ; that moves xidata around.
(0683)     ;
(0684) __pXIData:         word __text_end           ; ptr to extended idata
(0685) ENDIF
(0686) 
(0687)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
(0688)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
(0689) 
(0690)     ; CODE segment for general use
(0691)     ;
(0692)     AREA text (ROM, REL, CON)
(0693) __text_start:
(0694) 
(0695)     ; RAM area usage
(0696)     ;
(0697)     AREA data              (RAM, REL, CON)   ; initialized RAM
(0698) __data_start:
(0699) 
(0700)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
(0701)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
(0702)     AREA bss               (RAM, REL, CON)   ; general use
(0703) __bss_start:
(0704) 
(0705) ENDIF ; TOOLCHAIN
(0706) 
(0707) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_project1_Bank1
                                        (0006) export LoadConfigTBL_project1_Bank0
                                        (0007) export LoadConfigTBL_project1_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_project1_Bank0:
                                        (0010) ;  Instance name Counter8_1, User Module Counter8
                                        (0011) ;       Instance name Counter8_1, Block Name CNTR8(DBB00)
                                        (0012) 	db		23h, 00h		;Counter8_1_CONTROL_REG(DBB00CR0)
                                        (0013) 	db		21h, fah		;Counter8_1_PERIOD_REG(DBB00DR1)
                                        (0014) 	db		22h, 7dh		;Counter8_1_COMPARE_REG(DBB00DR2)
                                        (0015) ;  Instance name Counter8_2, User Module Counter8
                                        (0016) ;       Instance name Counter8_2, Block Name CNTR8(DBB01)
                                        (0017) 	db		27h, 00h		;Counter8_2_CONTROL_REG(DBB01CR0)
                                        (0018) 	db		25h, fah		;Counter8_2_PERIOD_REG(DBB01DR1)
                                        (0019) 	db		26h, 7dh		;Counter8_2_COMPARE_REG(DBB01DR2)
                                        (0020) ;  Instance name LCD, User Module LCD
                                        (0021) ;  Instance name LED_1, User Module LED
                                        (0022) ;  Instance name LED_2, User Module LED
                                        (0023) ;  Instance name LED_3, User Module LED
                                        (0024) ;  Global Register values Bank 0
                                        (0025) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0026) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0027) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0028) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0029) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0030) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0031) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0032) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0033) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0034) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0035) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0036) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0037) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0038) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0039) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0040) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0041) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0042) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0043) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0044) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0045) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0046) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0047) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0048) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0049) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0050) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0051) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0052) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0053) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0054) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0055) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0056) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0057) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0058) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0059) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0060) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0061) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0062) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0063) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0064) 	db		ffh
                                        (0065) LoadConfigTBL_project1_Bank1:
                                        (0066) ;  Instance name Counter8_1, User Module Counter8
                                        (0067) ;       Instance name Counter8_1, Block Name CNTR8(DBB00)
                                        (0068) 	db		20h, 29h		;Counter8_1_FUNC_REG(DBB00FN)
                                        (0069) 	db		21h, 11h		;Counter8_1_INPUT_REG(DBB00IN)
                                        (0070) 	db		22h, 40h		;Counter8_1_OUTPUT_REG(DBB00OU)
                                        (0071) ;  Instance name Counter8_2, User Module Counter8
                                        (0072) ;       Instance name Counter8_2, Block Name CNTR8(DBB01)
                                        (0073) 	db		24h, 29h		;Counter8_2_FUNC_REG(DBB01FN)
                                        (0074) 	db		25h, 11h		;Counter8_2_INPUT_REG(DBB01IN)
                                        (0075) 	db		26h, 40h		;Counter8_2_OUTPUT_REG(DBB01OU)
                                        (0076) ;  Instance name LCD, User Module LCD
                                        (0077) ;  Instance name LED_1, User Module LED
                                        (0078) ;  Instance name LED_2, User Module LED
                                        (0079) ;  Instance name LED_3, User Module LED
                                        (0080) ;  Global Register values Bank 1
                                        (0081) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0082) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0083) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0084) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0085) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0086) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0087) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0088) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0089) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0090) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0091) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0092) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0093) 	db		e1h, 2fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0094) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0095) 	db		dfh, c7h		; OscillatorControl_3 register (OSC_CR3)
                                        (0096) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0097) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0098) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0099) 	db		ffh
                                        (0100) LoadConfigTBL_project1_Ordered:
                                        (0101) ;  Ordered Global Register values

(0102) 	M8C_SetBank1
022D: 10       PUSH  X                  
022E: 62 00 00 MOV   REG[0x0],0x0       (0103) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0231: 62 01 FF MOV   REG[0x1],0xFF      (0104) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0234: 70 EF    AND   F,0xEF             (0105) 	M8C_SetBank0
0236: 62 03 FF MOV   REG[0x3],0xFF      (0106) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0239: 62 02 00 MOV   REG[0x2],0x0       (0107) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
023C: 71 10    OR    F,0x10             (0108) 	M8C_SetBank1
023E: 62 02 00 MOV   REG[0x2],0x0       (0109) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0241: 62 03 00 MOV   REG[0x3],0x0       (0110) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0244: 70 EF    AND   F,0xEF             (0111) 	M8C_SetBank0
0246: 62 01 00 MOV   REG[0x1],0x0       (0112) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0249: 71 10    OR    F,0x10             (0113) 	M8C_SetBank1
024B: 62 04 07 MOV   REG[0x4],0x7       (0114) 	mov	reg[04h], 07h		; Port_1_DriveMode_0 register (PRT1DM0)
024E: 62 05 F8 MOV   REG[0x5],0xF8      (0115) 	mov	reg[05h], f8h		; Port_1_DriveMode_1 register (PRT1DM1)
0251: 70 EF    AND   F,0xEF             (0116) 	M8C_SetBank0
0253: 62 07 F8 MOV   REG[0x7],0xF8      (0117) 	mov	reg[07h], f8h		; Port_1_DriveMode_2 register (PRT1DM2)
0256: 62 06 00 MOV   REG[0x6],0x0       (0118) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0259: 71 10    OR    F,0x10             (0119) 	M8C_SetBank1
025B: 62 06 00 MOV   REG[0x6],0x0       (0120) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
025E: 62 07 00 MOV   REG[0x7],0x0       (0121) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0261: 70 EF    AND   F,0xEF             (0122) 	M8C_SetBank0
0263: 62 05 00 MOV   REG[0x5],0x0       (0123) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0266: 71 10    OR    F,0x10             (0124) 	M8C_SetBank1
0268: 62 08 7F MOV   REG[0x8],0x7F      (0125) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
026B: 62 09 00 MOV   REG[0x9],0x0       (0126) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
026E: 70 EF    AND   F,0xEF             (0127) 	M8C_SetBank0
0270: 62 0B 00 MOV   REG[0xB],0x0       (0128) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0273: 62 0A 00 MOV   REG[0xA],0x0       (0129) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0276: 71 10    OR    F,0x10             (0130) 	M8C_SetBank1
0278: 62 0A 00 MOV   REG[0xA],0x0       (0131) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
027B: 62 0B 00 MOV   REG[0xB],0x0       (0132) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
027E: 70 EF    AND   F,0xEF             (0133) 	M8C_SetBank0
0280: 62 09 00 MOV   REG[0x9],0x0       (0134) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0283: 71 10    OR    F,0x10             (0135) 	M8C_SetBank1
0285: 62 0C 00 MOV   REG[0xC],0x0       (0136) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0288: 62 0D 00 MOV   REG[0xD],0x0       (0137) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
028B: 70 EF    AND   F,0xEF             (0138) 	M8C_SetBank0
028D: 62 0F 00 MOV   REG[0xF],0x0       (0139) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0290: 62 0E 00 MOV   REG[0xE],0x0       (0140) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0293: 71 10    OR    F,0x10             (0141) 	M8C_SetBank1
0295: 62 0E 00 MOV   REG[0xE],0x0       (0142) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0298: 62 0F 00 MOV   REG[0xF],0x0       (0143) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
029B: 70 EF    AND   F,0xEF             (0144) 	M8C_SetBank0
029D: 62 0D 00 MOV   REG[0xD],0x0       (0145) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02A0: 71 10    OR    F,0x10             (0146) 	M8C_SetBank1
02A2: 62 10 00 MOV   REG[0x10],0x0      (0147) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02A5: 62 11 00 MOV   REG[0x11],0x0      (0148) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02A8: 70 EF    AND   F,0xEF             (0149) 	M8C_SetBank0
02AA: 62 13 00 MOV   REG[0x13],0x0      (0150) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02AD: 62 12 00 MOV   REG[0x12],0x0      (0151) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02B0: 71 10    OR    F,0x10             (0152) 	M8C_SetBank1
02B2: 62 12 00 MOV   REG[0x12],0x0      (0153) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02B5: 62 13 00 MOV   REG[0x13],0x0      (0154) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02B8: 70 EF    AND   F,0xEF             (0155) 	M8C_SetBank0
02BA: 62 11 00 MOV   REG[0x11],0x0      (0156) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02BD: 71 10    OR    F,0x10             (0157) 	M8C_SetBank1
02BF: 62 14 00 MOV   REG[0x14],0x0      (0158) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02C2: 62 15 00 MOV   REG[0x15],0x0      (0159) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02C5: 70 EF    AND   F,0xEF             (0160) 	M8C_SetBank0
02C7: 62 17 00 MOV   REG[0x17],0x0      (0161) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02CA: 62 16 00 MOV   REG[0x16],0x0      (0162) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02CD: 71 10    OR    F,0x10             (0163) 	M8C_SetBank1
02CF: 62 16 00 MOV   REG[0x16],0x0      (0164) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02D2: 62 17 00 MOV   REG[0x17],0x0      (0165) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02D5: 70 EF    AND   F,0xEF             (0166) 	M8C_SetBank0
02D7: 62 15 00 MOV   REG[0x15],0x0      (0167) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02DA: 71 10    OR    F,0x10             (0168) 	M8C_SetBank1
02DC: 62 18 00 MOV   REG[0x18],0x0      (0169) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02DF: 62 19 00 MOV   REG[0x19],0x0      (0170) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02E2: 70 EF    AND   F,0xEF             (0171) 	M8C_SetBank0
02E4: 62 1B 00 MOV   REG[0x1B],0x0      (0172) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
02E7: 62 1A 00 MOV   REG[0x1A],0x0      (0173) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
02EA: 71 10    OR    F,0x10             (0174) 	M8C_SetBank1
02EC: 62 1A 00 MOV   REG[0x1A],0x0      (0175) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
02EF: 62 1B 00 MOV   REG[0x1B],0x0      (0176) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
02F2: 70 EF    AND   F,0xEF             (0177) 	M8C_SetBank0
02F4: 62 19 00 MOV   REG[0x19],0x0      (0178) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
02F7: 71 10    OR    F,0x10             (0179) 	M8C_SetBank1
02F9: 62 1C 00 MOV   REG[0x1C],0x0      (0180) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
02FC: 62 1D 00 MOV   REG[0x1D],0x0      (0181) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
02FF: 70 EF    AND   F,0xEF             (0182) 	M8C_SetBank0
0301: 62 1F 00 MOV   REG[0x1F],0x0      (0183) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0304: 62 1E 00 MOV   REG[0x1E],0x0      (0184) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0307: 71 10    OR    F,0x10             (0185) 	M8C_SetBank1
0309: 62 1E 00 MOV   REG[0x1E],0x0      (0186) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
030C: 62 1F 00 MOV   REG[0x1F],0x0      (0187) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
030F: 70 EF    AND   F,0xEF             (0188) 	M8C_SetBank0
0311: 62 1D 00 MOV   REG[0x1D],0x0      (0189) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0314: 70 EF    AND   F,0xEF             (0190) 	M8C_SetBank0
0316: 7F       RET                      (0191) 	ret
(0192) 
(0193) 
(0194) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm
                                        (0001) ; Generated by PSoC Designer 5.0.1127.0
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_project1
                                        (0026) export _LoadConfig_project1
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     

0319: 55 00 00 MOV   [0x0],0x0          (0067) 	mov		[Port_1_Data_SHADE], 0h
031C: 55 01 00 MOV   [0x1],0x0          (0068) 	mov		[Port_2_Data_SHADE], 0h
031F: 55 02 7F MOV   [0x2],0x7F         (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0322: 55 03 00 MOV   [0x3],0x0          (0070) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0071) 
0325: 7C 03 2C LCALL 0x032C             (0072) 	lcall	LoadConfig_project1
0328: 7C 02 2C LCALL 0x022C             (0073) 	lcall	LoadConfigTBL_project1_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
032B: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration project1
                                        (0081) ;
                                        (0082) ;    Load configuration registers for project1.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_project1:
                                        (0099)  LoadConfig_project1:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
032C: 10       PUSH  X                  (0102) 	push	x
032D: 70 EF    AND   F,0xEF             (0103)     M8C_SetBank0                    ; Force bank 0
032F: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
0331: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
0332: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_project1_Bank0
0334: 57 A0    MOV   X,0xA0             (0108)     mov     X, <LoadConfigTBL_project1_Bank0
0336: 7C 03 47 LCALL 0x0347             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
0339: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
033B: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
033C: 50 01    MOV   A,0x1              (0114)     mov     A, >LoadConfigTBL_project1_Bank1
033E: 57 FB    MOV   X,0xFB             (0115)     mov     X, <LoadConfigTBL_project1_Bank1
0340: 7C 03 47 LCALL 0x0347             (0116)     lcall   LoadConfig              ; Load the bank 1 values
                                        (0117) 
0343: 70 EF    AND   F,0xEF             (0118)     M8C_SetBank0                    ; Force return to bank 0
0345: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
0346: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
0347: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
0349: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
034A: 08       PUSH  A                  (0146)     push    A
034B: 4F       MOV   X,SP               (0147)     mov     X, SP
034C: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
034F: D0 04    JNC   0x0354             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0351: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
0354: 18       POP   A                  (0152)     pop     A
0355: 20       POP   X                  (0153)     pop     X
                                        (0154) 
                                        (0155) LoadConfigLp:
0356: 70 EF    AND   F,0xEF             (0156)     M8C_SetBank0                    ; Switch to bank 0
0358: 62 E3 00 MOV   REG[0xE3],0x0      (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
035B: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
035C: 08       PUSH  A                  (0159)     push    A
035D: 28       ROMX                     (0160)     romx                            ; Load register address from table
035E: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
0360: A0 1F    JZ    0x0380             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
0362: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
0363: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
0366: A0 03    JZ    0x036A             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0368: 71 10    OR    F,0x10             (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
036A: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
036C: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
036D: 20       POP   X                  (0170)     pop     X
036E: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
036F: 09 00    ADC   A,0x0              (0172)     adc     A, 0
0371: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
0372: 08       PUSH  A                  (0174)     push    A
0373: 28       ROMX                     (0175)     romx                            ; load config data from the table
0374: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
0375: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
0377: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
0379: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
037A: 20       POP   X                  (0180)     pop     X
037B: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
037C: 09 00    ADC   A,0x0              (0182)     adc     A, 0
037E: 8F D7    JMP   0x0356             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
0380: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
0382: 70 3F    AND   F,0x3F             
0384: 71 C0    OR    F,0xC0             (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0386: 7F       RET                      (0187)     ret
(0188) 
(0189) AREA InterruptRAM(ram, rel)
(0190) 
(0191) NO_SHADOW:
(0192) _NO_SHADOW:
(0193) ; write only register shadows
(0194) _Port_1_Data_SHADE:
(0195) Port_1_Data_SHADE:	BLK	1
(0196) _Port_2_Data_SHADE:
(0197) Port_2_Data_SHADE:	BLK	1
(0198) _Port_2_DriveMode_0_SHADE:
(0199) Port_2_DriveMode_0_SHADE:	BLK	1
(0200) _Port_2_DriveMode_1_SHADE:
(0201) Port_2_DriveMode_1_SHADE:	BLK	1
(0202) 
FILE: lib\led_3.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_3.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_3_Start
                                        (0027) export  LED_3_Start
                                        (0028) 
                                        (0029) export _LED_3_Stop
                                        (0030) export  LED_3_Stop
                                        (0031) 
                                        (0032) export _LED_3_On
                                        (0033) export  LED_3_On
                                        (0034) 
                                        (0035) export _LED_3_Off
                                        (0036) export  LED_3_Off
                                        (0037) 
                                        (0038) export _LED_3_Switch
                                        (0039) export  LED_3_Switch
                                        (0040) 
                                        (0041) export _LED_3_Invert
                                        (0042) export  LED_3_Invert
                                        (0043) 
                                        (0044) export _LED_3_GetState
                                        (0045) export  LED_3_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_3_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_3_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_3_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_3_On:
                                        (0079)  LED_3_On:
0387: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0389: 80 03    JMP   0x038D             (0081)    jmp  LED_3_Switch 
                                        (0082) 
                                        (0083) _LED_3_Start:
                                        (0084)  LED_3_Start:
                                        (0085) _LED_3_Stop:
                                        (0086)  LED_3_Stop:
                                        (0087) _LED_3_Off:
                                        (0088)  LED_3_Off:
038B: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_3_Switch:
                                        (0092)  LED_3_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
038D: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
0390: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0392: A0 06    JZ    0x0399             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
0394: 2E 00 04 OR    [0x0],0x4          (0102)    or   [Port_1_Data_SHADE],LED_3_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_1_Data_SHADE],~LED_3_PinMask
                                        (0105) ENDIF
0397: 80 04    JMP   0x039C             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0399: 26 00 FB AND   [0x0],0xFB         (0110)    and  [Port_1_Data_SHADE],~LED_3_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_1_Data_SHADE],LED_3_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
039C: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_1_Data_SHADE]
039E: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_3_PortDR],A
                                        (0118) 
03A0: 70 3F    AND   F,0x3F             
03A2: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
03A4: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_3_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_3_Invert:
                                        (0144)  LED_3_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
03A5: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
03A8: 36 00 04 XOR   [0x0],0x4          (0149)    xor  [Port_1_Data_SHADE],LED_3_PinMask
03AB: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_1_Data_SHADE]
03AD: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_3_PortDR],A
                                        (0152) 
03AF: 70 3F    AND   F,0x3F             
03B1: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
03B3: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_3_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_3_GetState:
                                        (0177)  LED_3_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
03B4: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
03B7: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
03B9: 21 04    AND   A,0x4              (0188)    and   A,LED_3_PinMask               ; Mask off the trash
03BB: A0 03    JZ    0x03BF             (0189)    jz    .End_LED_GS                   ; If zero, we're done
03BD: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
03BF: 70 3F    AND   F,0x3F             
03C1: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
03C3: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\led_2.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_2.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_2_Start
                                        (0027) export  LED_2_Start
                                        (0028) 
                                        (0029) export _LED_2_Stop
                                        (0030) export  LED_2_Stop
                                        (0031) 
                                        (0032) export _LED_2_On
                                        (0033) export  LED_2_On
                                        (0034) 
                                        (0035) export _LED_2_Off
                                        (0036) export  LED_2_Off
                                        (0037) 
                                        (0038) export _LED_2_Switch
                                        (0039) export  LED_2_Switch
                                        (0040) 
                                        (0041) export _LED_2_Invert
                                        (0042) export  LED_2_Invert
                                        (0043) 
                                        (0044) export _LED_2_GetState
                                        (0045) export  LED_2_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_2_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_2_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_2_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_2_On:
                                        (0079)  LED_2_On:
03C4: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
03C6: 80 03    JMP   0x03CA             (0081)    jmp  LED_2_Switch 
                                        (0082) 
                                        (0083) _LED_2_Start:
                                        (0084)  LED_2_Start:
                                        (0085) _LED_2_Stop:
                                        (0086)  LED_2_Stop:
                                        (0087) _LED_2_Off:
                                        (0088)  LED_2_Off:
03C8: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_2_Switch:
                                        (0092)  LED_2_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
03CA: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
03CD: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
03CF: A0 06    JZ    0x03D6             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
03D1: 2E 00 02 OR    [0x0],0x2          (0102)    or   [Port_1_Data_SHADE],LED_2_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_1_Data_SHADE],~LED_2_PinMask
                                        (0105) ENDIF
03D4: 80 04    JMP   0x03D9             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
03D6: 26 00 FD AND   [0x0],0xFD         (0110)    and  [Port_1_Data_SHADE],~LED_2_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_1_Data_SHADE],LED_2_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
03D9: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_1_Data_SHADE]
03DB: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_2_PortDR],A
                                        (0118) 
03DD: 70 3F    AND   F,0x3F             
03DF: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
03E1: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_2_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_2_Invert:
                                        (0144)  LED_2_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
03E2: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
03E5: 36 00 02 XOR   [0x0],0x2          (0149)    xor  [Port_1_Data_SHADE],LED_2_PinMask
03E8: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_1_Data_SHADE]
03EA: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_2_PortDR],A
                                        (0152) 
03EC: 70 3F    AND   F,0x3F             
03EE: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
03F0: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_2_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_2_GetState:
                                        (0177)  LED_2_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
03F1: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
03F4: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
03F6: 21 02    AND   A,0x2              (0188)    and   A,LED_2_PinMask               ; Mask off the trash
03F8: A0 03    JZ    0x03FC             (0189)    jz    .End_LED_GS                   ; If zero, we're done
03FA: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
03FC: 70 3F    AND   F,0x3F             
03FE: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0400: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\led_1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_1.asm
                                        (0004) ;;  Version: 1.2, Updated on 2009/10/9 at 10:6:29
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_1_Start
                                        (0027) export  LED_1_Start
                                        (0028) 
                                        (0029) export _LED_1_Stop
                                        (0030) export  LED_1_Stop
                                        (0031) 
                                        (0032) export _LED_1_On
                                        (0033) export  LED_1_On
                                        (0034) 
                                        (0035) export _LED_1_Off
                                        (0036) export  LED_1_Off
                                        (0037) 
                                        (0038) export _LED_1_Switch
                                        (0039) export  LED_1_Switch
                                        (0040) 
                                        (0041) export _LED_1_Invert
                                        (0042) export  LED_1_Invert
                                        (0043) 
                                        (0044) export _LED_1_GetState
                                        (0045) export  LED_1_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_1_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_1_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_1_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_1_On:
                                        (0079)  LED_1_On:
0401: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0403: 80 03    JMP   0x0407             (0081)    jmp  LED_1_Switch 
                                        (0082) 
                                        (0083) _LED_1_Start:
                                        (0084)  LED_1_Start:
                                        (0085) _LED_1_Stop:
                                        (0086)  LED_1_Stop:
                                        (0087) _LED_1_Off:
                                        (0088)  LED_1_Off:
0405: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
                                        (0090) 
                                        (0091) _LED_1_Switch:
                                        (0092)  LED_1_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
0407: 62 D0 00 MOV   REG[0xD0],0x0      (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
040A: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
040C: A0 06    JZ    0x0413             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(1)                                            ; Active High Digit Drive
040E: 2E 00 01 OR    [0x0],0x1          (0102)    or   [Port_1_Data_SHADE],LED_1_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
                                        (0104)    and  [Port_1_Data_SHADE],~LED_1_PinMask
                                        (0105) ENDIF
0411: 80 04    JMP   0x0416             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(1)                      ; Active High Digit Drive
0413: 26 00 FE AND   [0x0],0xFE         (0110)    and  [Port_1_Data_SHADE],~LED_1_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
                                        (0112)    or   [Port_1_Data_SHADE],LED_1_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0416: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_1_Data_SHADE]
0418: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_1_PortDR],A
                                        (0118) 
041A: 70 3F    AND   F,0x3F             
041C: 71 C0    OR    F,0xC0             (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
041E: 7F       RET                      (0121)    ret
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_1_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_1_Invert:
                                        (0144)  LED_1_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
041F: 62 D0 00 MOV   REG[0xD0],0x0      (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
0422: 36 00 01 XOR   [0x0],0x1          (0149)    xor  [Port_1_Data_SHADE],LED_1_PinMask
0425: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_1_Data_SHADE]
0427: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_1_PortDR],A
                                        (0152) 
0429: 70 3F    AND   F,0x3F             
042B: 71 C0    OR    F,0xC0             (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
042D: 7F       RET                      (0155)    ret
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_1_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_1_GetState:
                                        (0177)  LED_1_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
042E: 62 D0 00 MOV   REG[0xD0],0x0      (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
0431: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(1)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
                                        (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0433: 21 01    AND   A,0x1              (0188)    and   A,LED_1_PinMask               ; Mask off the trash
0435: A0 03    JZ    0x0439             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0437: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
                                        (0191) 
                                        (0192) .End_LED_GS:
0439: 70 3F    AND   F,0x3F             
043B: 71 C0    OR    F,0xC0             (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
043D: 7F       RET                      (0195)    ret
(0196) .ENDSECTION
FILE: lib\lcd.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.5, Updated on 2009/10/23 at 10:13:12
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
043E: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
043F: 10       PUSH  X                  (0209)     push  X
0440: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0441: B0 04    JNZ   0x0446             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0443: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0444: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0445: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0446: 90 44    CALL  0x048C             (0218)     call  LCD_WriteData                ; Write data to LCD
0448: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0449: 18       POP   A                  (0220)     pop   A
044A: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
044B: DF F2    JNC   0x043E             (0222)     jnc   .Loop_PrCString
044D: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
044E: 8F EF    JMP   0x043E             (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0450: 30       HALT                     
0451: 31 32    XOR   A,0x32             
0453: 33 34    XOR   A,[X+52]           
0455: 35 36    XOR   [X+54],A           
0457: 37 38 39 XOR   [X+56],0x39        
045A: 41 42 43 AND   REG[0x42],0x43     
045D: 44 45 46 OR    REG[X+0x45],0x46   
0460: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0461: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0462: 67       ASR   A                  (0262)     asr   A
0463: 67       ASR   A                  (0263)     asr   A
0464: 67       ASR   A                  (0264)     asr   A
0465: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0467: FF E7    INDEX 0x0450             (0266)     index LCD_HEX_STR                  ; Get Hex value
0469: 90 21    CALL  0x048C             (0267)     call  LCD_WriteData                ; Write data to screen
046B: 18       POP   A                  (0268)     pop   A                            ; Restore value
046C: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
046E: FF E0    INDEX 0x0450             (0270)     index LCD_HEX_STR                  ; Get Hex value
0470: 90 1A    CALL  0x048C             (0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0472: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0473: 4B       SWAP  A,X                (0305)     swap  A,X
0474: 9F EA    CALL  0x0460             (0306)     call  LCD_PrHexByte                ; Print MSB
0476: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0477: 9F E7    CALL  0x0460             (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0479: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
047A: 70 BF    AND   F,0xBF             (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
047C: 60 D3    MOV   REG[0xD3],A        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
047E: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0480: A0 06    JZ    0x0487             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0482: 90 08    CALL  0x048C             (0349)     call  LCD_WriteData                ; Write data to screen
0484: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0485: 8F F8    JMP   0x047E             (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
0487: 70 3F    AND   F,0x3F             
0489: 71 C0    OR    F,0xC0             (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
048B: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
048C: 90 65    CALL  0x04F3             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
048E: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
048F: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0490: 67       ASR   A                  (0390)     asr   A
0491: 67       ASR   A                  (0391)     asr   A
0492: 67       ASR   A                  (0392)     asr   A
0493: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0495: 90 3B    CALL  0x04D2             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0497: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0498: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
049A: 40       NOP                      (0397)     nop
049B: 40       NOP                      (0398)     nop
049C: 40       NOP                      (0399)     nop
049D: 90 33    CALL  0x04D2             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
049F: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
04A0: 90 51    CALL  0x04F3             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
04A2: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
04A3: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
04A4: 67       ASR   A                  (0436)     asr   A
04A5: 67       ASR   A                  (0437)     asr   A
04A6: 67       ASR   A                  (0438)     asr   A
04A7: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
04A9: 90 09    CALL  0x04B4             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
04AB: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
04AC: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
04AE: 40       NOP                      (0443)     nop
04AF: 40       NOP                      (0444)     nop
04B0: 40       NOP                      (0445)     nop
04B1: 90 01    CALL  0x04B4             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
04B3: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
04B4: 08       PUSH  A                  (0477)     push  A
04B5: 62 D0 00 MOV   REG[0xD0],0x0      (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
04B8: 26 01 80 AND   [0x1],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04BB: 51 01    MOV   A,[0x1]            (0480)     mov   A,[Port_2_Data_SHADE]
04BD: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
04BF: 18       POP   A                  (0483)     pop   A
04C0: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
04C2: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
04C4: 2A 01    OR    A,[0x1]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
04C6: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
04C8: 53 01    MOV   [0x1],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
04CA: 40       NOP                      (0489)     nop
04CB: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
04CD: 53 01    MOV   [0x1],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
04CF: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
04D1: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
04D2: 08       PUSH  A                  (0523)     push  A
04D3: 62 D0 00 MOV   REG[0xD0],0x0      (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
04D6: 26 01 80 AND   [0x1],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04D9: 2E 01 20 OR    [0x1],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
04DC: 51 01    MOV   A,[0x1]            (0527)     mov   A,[Port_2_Data_SHADE]
04DE: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
04E0: 18       POP   A                  (0530)     pop   A
04E1: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
04E3: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
04E5: 2A 01    OR    A,[0x1]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
04E7: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
04E9: 53 01    MOV   [0x1],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
04EB: 40       NOP                      (0536)     NOP
04EC: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
04EE: 53 01    MOV   [0x1],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
04F0: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
04F2: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
04F3: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
04F4: 62 D0 00 MOV   REG[0xD0],0x0      (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
04F7: 26 01 80 AND   [0x1],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
04FA: 51 01    MOV   A,[0x1]            (0574)     mov   A,[Port_2_Data_SHADE]
04FC: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
04FE: 26 02 F0 AND   [0x2],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0501: 51 02    MOV   A,[0x2]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0503: 71 10    OR    F,0x10             (0579)     M8C_SetBank1                                      ; Change port mode to read status
0505: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0507: 70 EF    AND   F,0xEF             (0581)     M8C_SetBank0
                                        (0582) 
0509: 2E 01 40 OR    [0x1],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
050C: 51 01    MOV   A,[0x1]            (0584)     mov   A,[Port_2_Data_SHADE]
050E: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0510: 40       NOP                      (0586)     NOP
                                        (0587) 
0511: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0512: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0514: 2E 01 50 OR    [0x1],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0517: 51 01    MOV   A,[0x1]            (0593)     mov   A,[Port_2_Data_SHADE]
0519: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
051B: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
051C: 40       NOP                      (0597)     nop
051D: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
051F: 08       PUSH  A                  (0610)     push  A
0520: 26 01 C0 AND   [0x1],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0523: 51 01    MOV   A,[0x1]            (0612)     mov   A,[Port_2_Data_SHADE]
0525: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0527: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0528: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0529: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
052A: 2E 01 50 OR    [0x1],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
052D: 51 01    MOV   A,[0x1]            (0620)     mov   A,[Port_2_Data_SHADE]
052F: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0531: 40       NOP                      (0623)     nop
0532: 40       NOP                      (0624)     nop
                                        (0625) 
0533: 26 01 C0 AND   [0x1],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0536: 51 01    MOV   A,[0x1]            (0627)     mov   A,[Port_2_Data_SHADE]
0538: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
053A: 18       POP   A                  (0630)     pop   A
053B: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
053D: A0 04    JZ    0x0542             (0633)     jz    .UNLOCK
053F: 79       DEC   X                  (0634)     dec   X
0540: BF D3    JNZ   0x0514             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0542: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0543: 2E 02 7F OR    [0x2],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0546: 51 02    MOV   A,[0x2]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0548: 71 10    OR    F,0x10             (0641)     M8C_SetBank1
054A: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
054C: 70 EF    AND   F,0xEF             (0643)     M8C_SetBank0
054E: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
054F: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
0550: 62 D0 00 MOV   REG[0xD0],0x0      (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0553: 26 02 80 AND   [0x2],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0556: 2E 02 7F OR    [0x2],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0559: 26 03 80 AND   [0x3],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
055C: 51 02    MOV   A,[0x2]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
055E: 71 10    OR    F,0x10             (0690)     M8C_SetBank1
0560: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0562: 51 03    MOV   A,[0x3]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0564: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0566: 70 EF    AND   F,0xEF             (0694)     M8C_SetBank0
                                        (0695) 
0568: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
056A: 90 67    CALL  0x05D3             (0697)     call  LCD_Delay50uTimes
056C: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
056E: 90 63    CALL  0x05D3             (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0570: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0572: 9F 40    CALL  0x04B4             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0574: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0576: 90 5B    CALL  0x05D3             (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0578: 50 03    MOV   A,0x3              (0707)     mov   A,03h
057A: 9F 38    CALL  0x04B4             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
057C: 90 63    CALL  0x05E1             (0710)     call  LCD_Delay50u
057E: 90 61    CALL  0x05E1             (0711)     call  LCD_Delay50u
0580: 90 5F    CALL  0x05E1             (0712)     call  LCD_Delay50u
                                        (0713) 
0582: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0584: 9F 2E    CALL  0x04B4             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0586: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0588: 90 49    CALL  0x05D3             (0718)     call  LCD_Delay50uTimes
                                        (0719) 
058A: 50 02    MOV   A,0x2              (0720)     mov   A,02h
058C: 9F 26    CALL  0x04B4             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
058E: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0590: 90 41    CALL  0x05D3             (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0592: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0594: 9F 0A    CALL  0x04A0             (0727)     call  LCD_Control
0596: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0598: 90 39    CALL  0x05D3             (0729)     call  LCD_Delay50uTimes
                                        (0730) 
059A: 50 01    MOV   A,0x1              (0731)     mov   A,01h
059C: 9F 02    CALL  0x04A0             (0732)     call  LCD_Control
059E: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05A0: 90 31    CALL  0x05D3             (0734)     call  LCD_Delay50uTimes
                                        (0735) 
05A2: 50 06    MOV   A,0x6              (0736)     mov   A,06h
05A4: 9E FA    CALL  0x04A0             (0737)     call  LCD_Control
                                        (0738) 
05A6: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
05A8: 9E F6    CALL  0x04A0             (0740)     call  LCD_Control
                                        (0741) 
05AA: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
05AC: 9E F2    CALL  0x04A0             (0743)     call  LCD_Control
                                        (0744) 
05AE: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
05B0: 9E EE    CALL  0x04A0             (0746)     call  LCD_Control
                                        (0747) 
05B2: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
05B4: 9E EA    CALL  0x04A0             (0749)     call  LCD_Control
                                        (0750) 
05B6: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
05B8: 9E E6    CALL  0x04A0             (0752)     call  LCD_Control
                                        (0753) 
05BA: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
05BC: 90 15    CALL  0x05D3             (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
05BE: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
05BF: 80 C0    JMP   0x0680             
05C1: 94 D4    CALL  0x0A97             
05C3: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
05C5: 10       PUSH  X                  (0791)     push  X                            ; Store COL
05C6: FF F7    INDEX 0x05BF             (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
05C8: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
05C9: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
05CB: 20       POP   X                  (0795)     pop   X
                                        (0796) 
05CC: 9E D2    CALL  0x04A0             (0797)     call  LCD_Control                  ; Write control byte
05CE: 70 3F    AND   F,0x3F             
05D0: 71 C0    OR    F,0xC0             (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
05D2: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
05D3: 90 0C    CALL  0x05E1             (0827)     call  LCD_Delay50u
05D5: 78       DEC   A                  (0828)     dec   A
05D6: BF FC    JNZ   0x05D3             (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
05D8: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
05D9: 08       PUSH  A                  
05DA: 19 3A    SBB   A,0x3A             
05DC: 7C 01 01 LCALL 0x0101             
05DF: 01 01    ADD   A,0x1              
05E1: 08       PUSH  A                  (0871)     push  A
05E2: 71 10    OR    F,0x10             (0872)     M8C_SetBank1                         ; [4]
05E4: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
05E6: 70 EF    AND   F,0xEF             (0874)     M8C_SetBank0                         ; [4]
05E8: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
05EA: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
05EC: D0 06    JNC   0x05F3             (0877)     jnc   .Delay50u_End
05EE: FF E9    INDEX 0x05D9             (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
05F0: 78       DEC   A                  (0880)     dec   A                              ; [4]
05F1: BF FE    JNZ   0x05F0             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
05F3: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
05F4: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
05F5: 4F       MOV   X,SP               (1015)     mov   X, SP
05F6: 10       PUSH  X                  (1016)     push  X
05F7: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
05F9: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
05FB: 70 3F    AND   F,0x3F             
05FD: 71 C0    OR    F,0xC0             (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
05FF: 9F C2    CALL  0x05C3             (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0601: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0602: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0605: B0 05    JNZ   0x060B             (1026)     jnz   .LCD_CHECK1
0607: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0609: 80 11    JMP   0x061B             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
060B: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
060E: D0 07    JNC   0x0616             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0610: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0612: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0614: 80 06    JMP   0x061B             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0616: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0618: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
061B: 9E 6F    CALL  0x048C             (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
061D: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
061F: BF E2    JNZ   0x0602             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
0621: 70 3F    AND   F,0x3F             
0623: 71 C0    OR    F,0xC0             (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0625: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
0626: 4F       MOV   X,SP               (1168)     mov   X, SP
0627: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0629: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
062B: 08       PUSH  A                  (1172)     push  A
062C: FF 91    INDEX 0x05BF             (1173)     index LCD_ROW_OFFSET  ; Get row offset
062E: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0630: 9E 6E    CALL  0x04A0             (1175)     call  LCD_Control                  ; Position Cursor
0632: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0635: B0 05    JNZ   0x063B             (1177)     jnz   .VBG_NZ_SEG
0637: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0639: 80 13    JMP   0x064D             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
063B: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
063E: D0 09    JNC   0x0648             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0640: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0642: 78       DEC   A                  (1185)     dec   A
0643: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0646: 80 06    JMP   0x064D             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0648: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
064B: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
064D: 9E 3D    CALL  0x048C             (1194)     call  LCD_WriteData                ; Write value
064F: 18       POP   A                  (1195)     pop   A
0650: 78       DEC   A                  (1196)     dec   A
0651: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0653: BF D7    JNZ   0x062B             (1198)     jnz   .VBG_LOOP
0655: 70 3F    AND   F,0x3F             
0657: 71 C0    OR    F,0xC0             (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0659: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
065A: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
065B: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
065C: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
065D: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
065F: 9E 3F    CALL  0x04A0             (1243)     call  LCD_Control                  ; Position the CG pointer
0661: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0664: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0667: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0669: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
066B: D0 05    JNC   0x0671             (1251)     jnc   .VBG_SOLID
066D: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
066F: 80 03    JMP   0x0673             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0671: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0673: 9E 17    CALL  0x048C             (1257)     call  LCD_WriteData                ; character data
0675: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0677: BF EF    JNZ   0x0667             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0679: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
067B: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
067E: BF E5    JNZ   0x0664             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0680: 18       POP   A                  (1264)     pop  A
0681: 18       POP   A                  (1265)     pop  A
0682: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0684: 9E 1A    CALL  0x04A0             (1267)     call LCD_Control                   ; need this.
0686: 70 3F    AND   F,0x3F             
0688: 71 C0    OR    F,0xC0             (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
068A: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
068B: 00       SWI                      
068C: 10       PUSH  X                  
068D: 18       POP   A                  
068E: 1C 1E    SBB   [iles+15],A        
0690: 1F 1F 00 SBB   [X+31],0x0         
0693: 10       PUSH  X                  
0694: 08       PUSH  A                  
0695: 04 02    ADD   [0x2],A            
0697: 01 00    ADD   A,0x0              
0699: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
069A: 38 03    ADD   SP,0x3             (1320)     add   SP,3
069C: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
069E: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
06A0: 9D FE    CALL  0x04A0             (1324)     call  LCD_Control                  ; Position the CG pointer
06A2: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
06A5: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
06A8: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
06AA: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
06AD: B0 05    JNZ   0x06B3             (1332)     jnz   .BG_OTHER
06AF: FF DA    INDEX 0x068B             (1333)     index LCD_BG_TYPE1
06B1: 80 03    JMP   0x06B5             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
06B3: FF DD    INDEX 0x0692             (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
06B5: 9D D5    CALL  0x048C             (1338)     call  LCD_WriteData
06B7: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
06B9: BF EE    JNZ   0x06A8             (1340)     jnz   .BG_Loop2
06BB: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
06BD: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
06C0: BF E4    JNZ   0x06A5             (1343)     jnz   .BG_Loop1
                                        (1344) 
06C2: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
06C4: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
06C6: 9D D8    CALL  0x04A0             (1347)     call  LCD_Control
06C8: 70 3F    AND   F,0x3F             
06CA: 71 C0    OR    F,0xC0             (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
06CC: 7F       RET                      (1349)     ret
(1350) .ENDSECTION
(1351) 
(1352) ENDIF
(1353) 
(1354) ; End of File LCD.asm
FILE: lib\counter8_2int.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8_2INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter8_2.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter8_2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter8_2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter8_2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069) 	;   the values of the A and X CPU registers.
                                        (0070) 	;lcall _COUNTING_INCREMENT
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
06CD: 7E       RETI                     (0076)    reti
(0077) 
(0078) 
(0079) ; end of file Counter8_2INT.asm
FILE: lib\counter8_2.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8_2.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter8_2.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter8_2_EnableInt
                                        (0030) export _Counter8_2_EnableInt
                                        (0031) export  Counter8_2_DisableInt
                                        (0032) export _Counter8_2_DisableInt
                                        (0033) export  Counter8_2_Start
                                        (0034) export _Counter8_2_Start
                                        (0035) export  Counter8_2_Stop
                                        (0036) export _Counter8_2_Stop
                                        (0037) export  Counter8_2_WritePeriod
                                        (0038) export _Counter8_2_WritePeriod
                                        (0039) export  Counter8_2_WriteCompareValue
                                        (0040) export _Counter8_2_WriteCompareValue
                                        (0041) export  Counter8_2_bReadCompareValue
                                        (0042) export _Counter8_2_bReadCompareValue
                                        (0043) export  Counter8_2_bReadCounter
                                        (0044) export _Counter8_2_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bCounter8_2_ReadCompareValue  ; deprecated
                                        (0049) export _bCounter8_2_ReadCompareValue  ; deprecated
                                        (0050) export  bCounter8_2_ReadCounter       ; deprecated
                                        (0051) export _bCounter8_2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter8_2_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter8_2_EnableInt:
                                        (0082) _Counter8_2_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
06CE: 43 E1 02 OR    REG[0xE1],0x2      (0084)    Counter8_2_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
06D1: 7F       RET                      (0086)    ret
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter8_2_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter8_2_DisableInt:
                                        (0109) _Counter8_2_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
06D2: 41 E1 FD AND   REG[0xE1],0xFD     (0111)    Counter8_2_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
06D5: 7F       RET                      (0113)    ret
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter8_2_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter8_2_Start:
                                        (0138) _Counter8_2_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
06D6: 43 27 01 OR    REG[0x27],0x1      (0140)    Counter8_2_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
06D9: 7F       RET                      (0142)    ret
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter8_2_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter8_2_Stop:
                                        (0166) _Counter8_2_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
06DA: 41 27 FE AND   REG[0x27],0xFE     (0168)    Counter8_2_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
06DD: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter8_2_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter8_2_WritePeriod:
                                        (0196) _Counter8_2_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
06DE: 60 25    MOV   REG[0x25],A        (0198)    mov   reg[Counter8_2_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
06E0: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: Counter8_2_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  Counter8_2_WriteCompareValue:
                                        (0223) _Counter8_2_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
06E1: 60 26    MOV   REG[0x26],A        (0225)    mov   reg[Counter8_2_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
06E3: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: Counter8_2_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  Counter8_2_bReadCompareValue:
                                        (0250) _Counter8_2_bReadCompareValue:
                                        (0251)  bCounter8_2_ReadCompareValue:                   ; this name deprecated
                                        (0252) _bCounter8_2_ReadCompareValue:                   ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
06E4: 5D 26    MOV   A,REG[0x26]        (0254)    mov   A, reg[Counter8_2_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
06E6: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: Counter8_2_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  Counter8_2_bReadCounter:
                                        (0284) _Counter8_2_bReadCounter:
                                        (0285)  bCounter8_2_ReadCounter:                        ; this name deprecated
                                        (0286) _bCounter8_2_ReadCounter:                        ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
06E7: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
06E8: 5D 26    MOV   A,REG[0x26]        (0296)    mov   A, reg[Counter8_2_COMPARE_REG]          ; Save the Compare register on the stack
06EA: 08       PUSH  A                  (0297)    push  A                                       ;
06EB: 5D 27    MOV   A,REG[0x27]        (0298)    mov   A, reg[Counter8_2_CONTROL_REG]          ; Save CR0 (running or stopped state)
06ED: 08       PUSH  A                  (0299)    push  A                                       ;
06EE: 41 27 FE AND   REG[0x27],0xFE     (0300)    Counter8_2_Stop_M                             ; Disable (stop) the Counter if running
06F1: 71 10    OR    F,0x10             (0301)    M8C_SetBank1                                  ;
06F3: 5D 25    MOV   A,REG[0x25]        (0302)    mov   A, reg[Counter8_2_INPUT_REG]            ; save the clock input setting
06F5: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
06F6: 62 25 00 MOV   REG[0x25],0x0      (0305)    mov   reg[Counter8_2_INPUT_REG], INPUT_REG_NULL
06F9: 70 EF    AND   F,0xEF             (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
06FB: 5D 24    MOV   A,REG[0x24]        (0308)    mov   A, reg[Counter8_2_COUNTER_REG]          ; DR2 <- DR0
06FD: 5D 26    MOV   A,REG[0x26]        (0309)    mov   A, reg[Counter8_2_COMPARE_REG]          ; Stash the Count on the stack
06FF: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
0700: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0702: 60 26    MOV   REG[0x26],A        (0312)    mov   reg[Counter8_2_COMPARE_REG], A
0704: 71 10    OR    F,0x10             (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0706: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0708: 60 25    MOV   REG[0x25],A        (0315)    mov   reg[Counter8_2_INPUT_REG], A            ;
070A: 70 EF    AND   F,0xEF             (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
070C: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
070E: 60 27    MOV   REG[0x27],A        (0318)    mov   reg[Counter8_2_CONTROL_REG], A          ;     this function was first called
0710: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
0711: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0713: 70 3F    AND   F,0x3F             
0715: 71 C0    OR    F,0xC0             (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0717: 7F       RET                      (0322)    ret
(0323) 
(0324) .ENDSECTION
(0325) 
(0326) ; End of File Counter8_2.asm
FILE: lib\counter8_1int.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8_1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter8_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
0718: 7C 09 CC LCALL _inc_press_interuptNo(0070)    lcall _inc_press_interuptNo
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
071B: 7E       RETI                     (0076)    reti
(0077) 
(0078) 
(0079) ; end of file Counter8_1INT.asm
FILE: lib\counter8_1.asm
                                        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8_1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2009/10/15 at 17:11:37
                                        (0005) ;;  Generated by PSoC Designer 5.0.1127.0
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2009. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter8_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter8_1_EnableInt
                                        (0030) export _Counter8_1_EnableInt
                                        (0031) export  Counter8_1_DisableInt
                                        (0032) export _Counter8_1_DisableInt
                                        (0033) export  Counter8_1_Start
                                        (0034) export _Counter8_1_Start
                                        (0035) export  Counter8_1_Stop
                                        (0036) export _Counter8_1_Stop
                                        (0037) export  Counter8_1_WritePeriod
                                        (0038) export _Counter8_1_WritePeriod
                                        (0039) export  Counter8_1_WriteCompareValue
                                        (0040) export _Counter8_1_WriteCompareValue
                                        (0041) export  Counter8_1_bReadCompareValue
                                        (0042) export _Counter8_1_bReadCompareValue
                                        (0043) export  Counter8_1_bReadCounter
                                        (0044) export _Counter8_1_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bCounter8_1_ReadCompareValue  ; deprecated
                                        (0049) export _bCounter8_1_ReadCompareValue  ; deprecated
                                        (0050) export  bCounter8_1_ReadCounter       ; deprecated
                                        (0051) export _bCounter8_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter8_1_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter8_1_EnableInt:
                                        (0082) _Counter8_1_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
071C: 43 E1 01 OR    REG[0xE1],0x1      (0084)    Counter8_1_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
071F: 7F       RET                      (0086)    ret
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter8_1_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter8_1_DisableInt:
                                        (0109) _Counter8_1_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
0720: 41 E1 FE AND   REG[0xE1],0xFE     (0111)    Counter8_1_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0723: 7F       RET                      (0113)    ret
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter8_1_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter8_1_Start:
                                        (0138) _Counter8_1_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
0724: 43 23 01 OR    REG[0x23],0x1      (0140)    Counter8_1_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0727: 7F       RET                      (0142)    ret
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter8_1_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter8_1_Stop:
                                        (0166) _Counter8_1_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
0728: 41 23 FE AND   REG[0x23],0xFE     (0168)    Counter8_1_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
072B: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter8_1_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter8_1_WritePeriod:
                                        (0196) _Counter8_1_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
072C: 60 21    MOV   REG[0x21],A        (0198)    mov   reg[Counter8_1_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
072E: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: Counter8_1_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  Counter8_1_WriteCompareValue:
                                        (0223) _Counter8_1_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
072F: 60 22    MOV   REG[0x22],A        (0225)    mov   reg[Counter8_1_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0731: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: Counter8_1_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  Counter8_1_bReadCompareValue:
                                        (0250) _Counter8_1_bReadCompareValue:
                                        (0251)  bCounter8_1_ReadCompareValue:                   ; this name deprecated
                                        (0252) _bCounter8_1_ReadCompareValue:                   ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
0732: 5D 22    MOV   A,REG[0x22]        (0254)    mov   A, reg[Counter8_1_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
0734: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: Counter8_1_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  Counter8_1_bReadCounter:
                                        (0284) _Counter8_1_bReadCounter:
                                        (0285)  bCounter8_1_ReadCounter:                        ; this name deprecated
                                        (0286) _bCounter8_1_ReadCounter:                        ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
0735: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
0736: 5D 22    MOV   A,REG[0x22]        (0296)    mov   A, reg[Counter8_1_COMPARE_REG]          ; Save the Compare register on the stack
0738: 08       PUSH  A                  (0297)    push  A                                       ;
0739: 5D 23    MOV   A,REG[0x23]        (0298)    mov   A, reg[Counter8_1_CONTROL_REG]          ; Save CR0 (running or stopped state)
073B: 08       PUSH  A                  (0299)    push  A                                       ;
073C: 41 23 FE AND   REG[0x23],0xFE     (0300)    Counter8_1_Stop_M                             ; Disable (stop) the Counter if running
073F: 71 10    OR    F,0x10             (0301)    M8C_SetBank1                                  ;
0741: 5D 21    MOV   A,REG[0x21]        (0302)    mov   A, reg[Counter8_1_INPUT_REG]            ; save the clock input setting
0743: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
0744: 62 21 00 MOV   REG[0x21],0x0      (0305)    mov   reg[Counter8_1_INPUT_REG], INPUT_REG_NULL
0747: 70 EF    AND   F,0xEF             (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0749: 5D 20    MOV   A,REG[0x20]        (0308)    mov   A, reg[Counter8_1_COUNTER_REG]          ; DR2 <- DR0
074B: 5D 22    MOV   A,REG[0x22]        (0309)    mov   A, reg[Counter8_1_COMPARE_REG]          ; Stash the Count on the stack
074D: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
074E: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0750: 60 22    MOV   REG[0x22],A        (0312)    mov   reg[Counter8_1_COMPARE_REG], A
0752: 71 10    OR    F,0x10             (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0754: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0756: 60 21    MOV   REG[0x21],A        (0315)    mov   reg[Counter8_1_INPUT_REG], A            ;
0758: 70 EF    AND   F,0xEF             (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
075A: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
075C: 60 23    MOV   REG[0x23],A        (0318)    mov   reg[Counter8_1_CONTROL_REG], A          ;     this function was first called
075E: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
075F: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0761: 70 3F    AND   F,0x3F             
0763: 71 C0    OR    F,0xC0             (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0765: 7F       RET                      (0322)    ret
(0323) 
(0324) .ENDSECTION
(0325) 
(0326) ; End of File Counter8_1.asm
FILE: .\main.asm
                                        (0001) ;-----------------------------------------------------------------------------
                                        (0002) ; Assembly main line
                                        (0003) ;-----------------------------------------------------------------------------
                                        (0004) 
                                        (0005) include "m8c.inc"       ; part specific constants and macros
                                        (0006) include "memory.inc"    ; Constants & macros for SMM/LMM and Compiler
                                        (0007) include "PSoCAPI.inc"   ; PSoC API definitions for all User Modules
                                        (0008) 
                                        (0009) 
                                        (0010) export _main
                                        (0011) export _COUNTING_INCREMENT
                                        (0012) export _inc_press_interuptNo
                                        (0013) 
                                        (0014) BUTTON_MSK: EQU 80h ;use port2 pin7 as the input of button press, 80h=10000000
                                        (0015) CRT_STATE: EQU 80h   ;current State                                                                                            
                                        (0016) PRESS_INTERUPTNO: EQU B5h
                                        (0017) LED_MSK: EQU 01h
                                        (0018) ;use to store x times stopwatch result
                                        (0019) SET_HOUR: EQU 81h  
                                        (0020) SET_MINUTE:	EQU 8Ah
                                        (0021) SET_SEC: EQU 93h	
                                        (0022) SET_MS:	EQU 9Ch
                                        (0023) MS_COUNT: EQU A5h
                                        (0024) ;used to store the min,max,sum of x stopwatch results
                                        (0025) TEMP_MIN_HOUR: EQU A6h 
                                        (0026) TEMP_MIN_MINUTE: EQU A7h
                                        (0027) TEMP_MIN_SEC: EQU A8h
                                        (0028) TEMP_MAX_HOUR: EQU A9h
                                        (0029) TEMP_MAX_MINUTE: EQU AAh
                                        (0030) TEMP_MAX_SEC: EQU ABh
                                        (0031) TEMP_SUM_HOUR: EQU ACh
                                        (0032) TEMP_SUM_MINUTE: EQU ADh
                                        (0033) TEMP_SUM_SEC: EQU AEh
                                        (0034) TIMING_TIMES: EQU AFh
                                        (0035) ;division parameters
                                        (0036) remainder:	EQU B0h
                                        (0037) dividend: EQU B1h
                                        (0038) divisor:	EQU B2h
                                        (0039) temp:	EQU B3h
                                        (0040) lcount: EQU B4h
                                        (0041) 
                                        (0042) 
                                        (0043) 
                                        (0044) .LITERAL
                                        (0045) Longest:
                                        (0046) 	DS "Longest Time:"
                                        (0047) 	DB 00h
                                        (0048) Avg:
                                        (0049) 	DS "Average Time:"
                                        (0050) 	DB 00h				 			; String should always be null terminated							
                                        (0051) Shortest:
                                        (0052) 	DS "Shortest Time:"
                                        (0053) 	DB 00h 							
                                        (0054) IDLE:
                                        (0055) 	DS "Idle"
                                        (0056) 	DB 00h 								
                                        (0057) SENSE_MODE:
                                        (0058) 	DS "Sensitivity Mode"
                                        (0059) 	DB 00h 
                                        (0060) ACCRUARY_MODE:
                                        (0061) 	DS "Accuracy Mode"
                                        (0062) 	DB 00h 
                                        (0063) MEASURE_MODE:
                                        (0064) 	DS "Measurement Mode"
                                        (0065) 	DB 00h 
                                        (0066) MEMORY_MODE:
                                        (0067) 	DS "Memory Mode"
                                        (0068) 	DB 00h 
                                        (0069) 
                                        (0070) DIGITS: DS "0123456789:."
                                        (0071) 
                                        (0072) .ENDLITERAL
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) _main:	

07DE: 55 80 03 MOV   [iles+113],0x3     (0077) 	mov [CRT_STATE],3    				;initialize CRT_STATE to be idle
07E1: 71 01    OR    F,0x1              (0078) 	or  F,01h   						;Enable globle interrupt
07E3: 9F 37    CALL  0x071C             (0079) 	call Counter8_1_EnableInt			;enable Counter Interupt
07E5: 9E E7    CALL  0x06CE             (0080) 	call Counter8_2_EnableInt
07E7: 9D 67    CALL  0x0550             (0081) 	call LCD_Start						;start LCD
07E9: 9D 65    CALL  0x0550             (0082) 	call LCD_Init						;initialize LCD
07EB: 9C 18    CALL  0x0405             (0083) 	call _LED_1_Start					;start the LEDs, which are used to indicate the CRT_STATE
07ED: 9B D9    CALL  0x03C8             (0084) 	call _LED_2_Start
07EF: 9B 9A    CALL  0x038B             (0085) 	call _LED_3_Start	
07F1: 55 AF 00 MOV   [iles+160],0x0     (0086) 	mov [TIMING_TIMES],00h				;initialize the stopwatch using time to be 0
                                        (0087) _BACK:	
07F4: 91 C0    CALL  0x09B6             (0088) 	call _button_press
07F6: 70 F9    AND   F,0xF9             (0089) 	and  F,F9h   						;initalize C , Z flag to 0 
07F8: 3C B5 0F CMP   [iles+166],0xF     (0090) 	cmp [PRESS_INTERUPTNO],15			;if press>3s, jmp to FSM1
07FB: 92 87    CALL  0x0A84             (0091) 	call _LCD_Display_PressNo
07FD: D0 01    JNC   0x07FF             (0092) 	jnc FSM1
                                        (0093) 	
                                        (0094) FSM1:
07FF: 3C 80 00 CMP   [iles+113],0x0     (0095) 	cmp [CRT_STATE],0	
0802: 91 F6    CALL  0x09FA             (0096) 	call _LCD_Display_Idle 				;display mode
0804: 92 89    CALL  0x0A8F             (0097) 	call _LED_Display
0806: A0 25    JZ    0x082C             (0098) 	jz  STATE0
0808: 3C 80 01 CMP   [iles+113],0x1     (0099) 	cmp [CRT_STATE],1
080B: 91 FA    CALL  0x0A07             (0100) 	call _LCD_Display_Sensitity    		;display mode
080D: 92 80    CALL  0x0A8F             (0101) 	call _LED_Display
080F: A0 21    JZ    0x0831             (0102) 	jz  STATE1
0811: 3C 80 02 CMP   [iles+113],0x2     (0103) 	cmp [CRT_STATE],2
0814: 91 FE    CALL  0x0A14             (0104) 	call _LCD_Display_Accuracy   		;display mode
0816: 92 77    CALL  0x0A8F             (0105) 	call _LED_Display
0818: A0 1D    JZ    0x0836             (0106) 	jz  STATE2
081A: 3C 80 03 CMP   [iles+113],0x3     (0107) 	cmp [CRT_STATE],3
081D: 92 02    CALL  0x0A21             (0108) 	call _LCD_Display_Measurement        ;display mode
081F: 92 6E    CALL  0x0A8F             (0109) 	call _LED_Display	
0821: A0 19    JZ    0x083B             (0110) 	jz  STATE3
0823: 3C 80 04 CMP   [iles+113],0x4     (0111) 	cmp [CRT_STATE],4
0826: 92 06    CALL  0x0A2E             (0112) 	call _LCD_Display_Memory    			;display mode
0828: 92 65    CALL  0x0A8F             (0113) 	call _LED_Display
082A: A1 01    JZ    0x092C             (0114) 	jz  STATE4	
                                        (0115) 	
                                        (0116) STATE0:                      ;idle	
082C: 55 80 01 MOV   [iles+113],0x1     (0117) 	mov [CRT_STATE],1   				;change the current state to next
082F: 8F C4    JMP   0x07F4             (0118) 	jmp _BACK
                                        (0119) 
                                        (0120) STATE1: 					;SensitityMode
                                        (0121) 	;add codes here
0831: 55 80 02 MOV   [iles+113],0x2     (0122) 	mov [CRT_STATE],2             		;change the current state to next
0834: 8F BF    JMP   0x07F4             (0123) 	jmp _BACK
                                        (0124) 	
                                        (0125) STATE2:							     ;AccuracyMode
                                        (0126) 	;add codes here
0836: 55 80 03 MOV   [iles+113],0x3     (0127) 	mov [CRT_STATE],3   				;change the current state to next
0839: 8F BA    JMP   0x07F4             (0128) 	jmp _BACK
                                        (0129) 
                                        (0130) STATE3:									;MeasurementMode
083B: 91 79    CALL  0x09B6             (0131) 	call _button_press
083D: 70 F9    AND   F,0xF9             (0132) 	and  F,F9h   						;initalize C and Z flag to 0
083F: 3C B5 00 CMP   [iles+166],0x0     (0133) 	cmp [PRESS_INTERUPTNO],0			;if no press, Z flag set 
0842: A0 0B    JZ    0x084E             (0134) 	jz 	_is_Sound_Mode
0844: 3C B5 0F CMP   [iles+166],0xF     (0135) 	cmp [PRESS_INTERUPTNO],15 			;if press<3s, jmp to FSM1
0847: D0 08    JNC   0x0850             (0136) 	jnc _start_stopwatch
0849: 55 80 04 MOV   [iles+113],0x4     (0137) 	mov [CRT_STATE],4
084C: 8F A7    JMP   0x07F4             (0138) 	jmp _BACK
                                        (0139) _is_Sound_Mode:
                                        (0140) 	;if also not sound mode ,jmp STATE3_END
                                        (0141) 	;if it is sound mode, start stopwatch
084E: 80 01    JMP   0x0850             (0142) 	jmp	_start_stopwatch
                                        (0143) _start_stopwatch:
0850: 76 AF    INC   [iles+160]         (0144) 	inc [TIMING_TIMES]					;counting how many stopwatch are used
                                        (0145) 	;mov [MS_COUNT],00h
0852: 9E 82    CALL  0x06D6             (0146) 	call Counter8_2_Start
0854: 90 2B    CALL  0x0881             (0147) 	call CHECK_ShortPress
0856: C0 37    JC    0x088E             (0148) 	jc 	_stop_stopwatch
                                        (0149) 	
                                        (0150) _COUNTING_INCREMENT:
0858: 76 A5    INC   [iles+150]         (0151) 	inc [MS_COUNT]
085A: 76 9C    INC   [iles+141]         (0152) 	inc [SET_MS]						;if MS=100MS,;SET_MS=
085C: 70 FD    AND   F,0xFD             (0153) 	and  F,FDh   						;initalize Z flag to 0
085E: 3C 9C 0B CMP   [iles+141],0xB     (0154) 	cmp [SET_MS],11						;CMP MS,11
0861: A0 01    JZ    0x0863             (0155) 	jz	SECOND_COUNT
                                        (0156)  SECOND_COUNT:
0863: 76 93    INC   [iles+132]         (0157) 	inc [SET_SEC]						;if MS==11,Set_SEC=Set_SEC+1,set_ms=1
0865: 55 9C 01 MOV   [iles+141],0x1     (0158) 	mov [SET_MS],1
0868: 70 FD    AND   F,0xFD             (0159) 	and  F,FDh   						;initalize Z flag to 0
086A: 3C 93 3D CMP   [iles+132],0x3D    (0160) 	cmp [SET_SEC],61					;check if second>60 sec
086D: A0 01    JZ    0x086F             (0161) 	jz	MINUTE_COUNT
                                        (0162)  MINUTE_COUNT:	
086F: 76 8A    INC   [iles+123]         (0163)  	inc	[SET_MINUTE]
0871: 55 93 01 MOV   [iles+132],0x1     (0164) 	mov [SET_SEC],1
0874: 70 FD    AND   F,0xFD             (0165) 	and  F,FDh 
0876: 3C 8A 3D CMP   [iles+123],0x3D    (0166) 	cmp	[SET_MINUTE],61					
0879: A0 01    JZ    0x087B             (0167) 	jz	HOUR_COUNT
                                        (0168)  HOUR_COUNT:
087B: 76 81    INC   [iles+114]         (0169)  	inc [SET_HOUR]						
087D: 55 8A 01 MOV   [iles+123],0x1     (0170) 	mov	[SET_MINUTE],1
0880: 7F       RET                      (0171) 	ret
                                        (0172) 
                                        (0173) 	
                                        (0174) CHECK_ShortPress:
0881: 81 34    JMP   0x09B6             (0175) 	jmp _button_press
0883: 70 F9    AND   F,0xF9             (0176) 	and  F,F9h   						;initalize C and Z flag to 0
0885: 3C B5 00 CMP   [iles+166],0x0     (0177) 	cmp [PRESS_INTERUPTNO],0			;if no press, Z flag set 
0888: B0 01    JNZ   0x088A             (0178) 	jnz _compare_X 	
                                        (0179) 	_compare_X:
088A: 3C B5 0F CMP   [iles+166],0xF     (0180) 	cmp [PRESS_INTERUPTNO],15 			;if press<3s, jmp to FSM1
088D: 7E       RETI                     (0181) 	reti
                                        (0182) 
                                        (0183) 	
                                        (0184) _stop_stopwatch:
088E: 9E 4A    CALL  0x06DA             (0185) 	call Counter8_2_Stop
0890: 70 FD    AND   F,0xFD             (0186) 	and  F,FDh   						;initalize Z flag to 0
0892: 3C AF 01 CMP   [iles+160],0x1     (0187) 	cmp [TIMING_TIMES],1
0895: A0 19    JZ    0x08AF             (0188) 	jz	_initalize_temp
0897: B0 2F    JNZ   0x08C7             (0189) 	jnz _compare_temp
                                        (0190) _BACK_STOP:
0899: 50 9C    MOV   A,0x9C             (0191) 	mov A,SET_MS
089B: 74       INC   A                  (0192) 	inc A
089C: 50 93    MOV   A,0x93             (0193) 	mov A,SET_SEC
089E: 74       INC   A                  (0194) 	inc A
089F: 50 8A    MOV   A,0x8A             (0195) 	mov A,SET_MINUTE
08A1: 74       INC   A                  (0196) 	inc A
08A2: 50 81    MOV   A,0x81             (0197) 	mov A,SET_HOUR
08A4: 74       INC   A                  (0198) 	inc A						;increase the address of them to store the next coming result of stopwatch
08A5: 81 95    JMP   0x0A3B             (0199) 	jmp _LCD_Display_Time
                                        (0200) 	;counter for y Sec to stay
08A7: 70 F9    AND   F,0xF9             (0201) 	and  F,F9h   						;initalize C and Z flag to 0
08A9: 9F D6    CALL  0x0881             (0202) 	call CHECK_ShortPress
08AB: CF A4    JC    0x0850             (0203) 	jc 	_start_stopwatch
08AD: DF 46    JNC   0x07F4             (0204) 	jnc _BACK
                                        (0205) 	
                                        (0206) 	
                                        (0207) _initalize_temp:
08AF: 51 81    MOV   A,[iles+114]       (0208) 	mov	A,[SET_HOUR]
08B1: 53 A6    MOV   [iles+151],A       (0209) 	mov	[TEMP_MIN_HOUR],A
08B3: 53 A9    MOV   [iles+154],A       (0210) 	mov [TEMP_MAX_HOUR],A
08B5: 53 AC    MOV   [iles+157],A       (0211) 	mov [TEMP_SUM_HOUR],A
08B7: 51 8A    MOV   A,[iles+123]       (0212) 	mov A,[SET_MINUTE]
08B9: 53 A7    MOV   [iles+152],A       (0213) 	mov [TEMP_MIN_MINUTE],A
08BB: 53 AA    MOV   [iles+155],A       (0214) 	mov [TEMP_MAX_MINUTE],A	
08BD: 53 AD    MOV   [iles+158],A       (0215) 	mov [TEMP_SUM_MINUTE],A
08BF: 51 93    MOV   A,[iles+132]       (0216) 	mov A,[SET_SEC]
08C1: 53 A8    MOV   [iles+153],A       (0217) 	mov [TEMP_MIN_SEC],A	
08C3: 53 AB    MOV   [iles+156],A       (0218) 	mov [TEMP_MAX_SEC],A
08C5: 53 AE    MOV   [iles+159],A       (0219) 	mov [TEMP_SUM_SEC],A
                                        (0220) _compare_temp:
08C7: 70 F9    AND   F,0xF9             (0221) 	and	F,F9h   						;initalize C and Z flag to 0
08C9: 51 81    MOV   A,[iles+114]       (0222) 	mov	A,[SET_HOUR]
08CB: 3A A6    CMP   A,[iles+151]       (0223) 	cmp A,[TEMP_MIN_HOUR]
08CD: C0 23    JC    0x08F1             (0224) 	jc	_update_minAndSum						;if current hour<min_hour,update min 
08CF: 51 8A    MOV   A,[iles+123]       (0225) 	mov A,[SET_MINUTE]
08D1: 3A A7    CMP   A,[iles+152]       (0226) 	cmp A,[TEMP_MIN_MINUTE]
08D3: C0 1D    JC    0x08F1             (0227) 	jc	_update_minAndSum
08D5: 51 93    MOV   A,[iles+132]       (0228) 	mov A,[SET_SEC]
08D7: 3A A8    CMP   A,[iles+153]       (0229) 	cmp A,[TEMP_MIN_SEC]
08D9: C0 17    JC    0x08F1             (0230) 	jc	_update_minAndSum
                                        (0231) 	//if current_time>min_time, continue compare current_time vs. max_time
08DB: 70 F9    AND   F,0xF9             (0232) 	and	F,F9h   						;initalize C and Z flag to 0
08DD: 51 81    MOV   A,[iles+114]       (0233) 	mov	A,[SET_HOUR]
08DF: 3A A9    CMP   A,[iles+154]       (0234) 	cmp A,[TEMP_MAX_HOUR]				
08E1: D0 0F    JNC   0x08F1             (0235) 	jnc _update_minAndSum						;if current hour>min_hour,update min
08E3: 51 8A    MOV   A,[iles+123]       (0236) 	mov A,[SET_MINUTE]
08E5: 3A A7    CMP   A,[iles+152]       (0237) 	cmp A,[TEMP_MIN_MINUTE]
08E7: D0 09    JNC   0x08F1             (0238) 	jnc _update_minAndSum
08E9: 51 93    MOV   A,[iles+132]       (0239) 	mov A,[SET_SEC]
08EB: 3A A8    CMP   A,[iles+153]       (0240) 	cmp A,[TEMP_MIN_SEC]
08ED: D0 03    JNC   0x08F1             (0241) 	jnc _update_minAndSum
                                        (0242) 	//if min_time<current_time<max_time,just update sum
08EF: 80 29    JMP   0x0919             (0243) 	jmp _update_sum
                                        (0244) _update_minAndSum:
08F1: 51 81    MOV   A,[iles+114]       (0245) 	mov	A,[SET_HOUR]	
08F3: 53 A6    MOV   [iles+151],A       (0246) 	mov	[TEMP_MIN_HOUR],A
08F5: 04 AC    ADD   [iles+157],A       (0247) 	add [TEMP_SUM_HOUR],A
08F7: 51 8A    MOV   A,[iles+123]       (0248) 	mov A,[SET_MINUTE]	
08F9: 53 A7    MOV   [iles+152],A       (0249) 	mov [TEMP_MIN_MINUTE],A
08FB: 04 AD    ADD   [iles+158],A       (0250) 	add [TEMP_SUM_MINUTE],A
08FD: 51 93    MOV   A,[iles+132]       (0251) 	mov A,[SET_SEC]	
08FF: 53 A8    MOV   [iles+153],A       (0252) 	mov [TEMP_MIN_SEC],A
0901: 04 AE    ADD   [iles+159],A       (0253) 	add [TEMP_SUM_SEC],A
0903: 8F 95    JMP   0x0899             (0254) 	jmp _BACK_STOP
                                        (0255) 	
                                        (0256) _update_maxAndSum:
0905: 51 81    MOV   A,[iles+114]       (0257) 	mov	A,[SET_HOUR]	
0907: 53 A9    MOV   [iles+154],A       (0258) 	mov	[TEMP_MAX_HOUR],A
0909: 04 AC    ADD   [iles+157],A       (0259) 	add [TEMP_SUM_HOUR],A
090B: 51 8A    MOV   A,[iles+123]       (0260) 	mov A,[SET_MINUTE]	
090D: 53 AA    MOV   [iles+155],A       (0261) 	mov [TEMP_MAX_MINUTE],A
090F: 04 AD    ADD   [iles+158],A       (0262) 	add [TEMP_SUM_MINUTE],A 
0911: 51 93    MOV   A,[iles+132]       (0263) 	mov A,[SET_SEC]	
0913: 53 AB    MOV   [iles+156],A       (0264) 	mov [TEMP_MAX_SEC],A
0915: 04 AE    ADD   [iles+159],A       (0265) 	add [TEMP_SUM_SEC],A
0917: 8F 81    JMP   0x0899             (0266) 	jmp	_BACK_STOP
                                        (0267) _update_sum:
0919: 51 81    MOV   A,[iles+114]       (0268) 	mov	A,[SET_HOUR]      
091B: 04 AC    ADD   [iles+157],A       (0269) 	add [TEMP_SUM_HOUR],A
091D: 51 8A    MOV   A,[iles+123]       (0270) 	mov A,[SET_MINUTE]
091F: 04 AD    ADD   [iles+158],A       (0271) 	add [TEMP_SUM_MINUTE],A
0921: 51 93    MOV   A,[iles+132]       (0272) 	mov A,[SET_SEC]
0923: 04 AE    ADD   [iles+159],A       (0273) 	add [TEMP_SUM_SEC],A
0925: 8F 73    JMP   0x0899             (0274) 	jmp	_BACK_STOP
                                        (0275) 
                                        (0276) 	
                                        (0277) STATE3_END:	
0927: 55 80 04 MOV   [iles+113],0x4     (0278) 	mov [CRT_STATE],4   				;change the current state to next
092A: 8E C9    JMP   0x07F4             (0279) 	JMP _BACK
                                        (0280) 
                                        (0281) STATE4:									;MemoryMode
092C: 55 80 01 MOV   [iles+113],0x1     (0282) 	mov [CRT_STATE],1					;change the current state to next state
092F: 8F 51    JMP   0x0881             (0283) 	jmp CHECK_ShortPress
0931: DE CD    JNC   0x07FF             (0284) 	jnc	FSM1							;if long press button, jump back to next state
                                        (0285) 	
                                        (0286) 	//calculate Avg based on SUM
0933: 51 AC    MOV   A,[iles+157]       (0287) 	mov A, [TEMP_SUM_HOUR]
0935: 53 B1    MOV   [iles+162],A       (0288) 	mov [dividend],A
0937: 55 B2 09 MOV   [iles+163],0x9     (0289) 	mov [divisor],09h
093A: 80 55    JMP   0x0990             (0290) 	jmp div8
093C: 51 B1    MOV   A,[iles+162]       (0291) 	mov A,[dividend]
093E: 53 AC    MOV   [iles+157],A       (0292) 	mov [TEMP_SUM_HOUR],A				;restore the result(Avg) back to TEMP_SUM
0940: 51 AD    MOV   A,[iles+158]       (0293) 	mov A, [TEMP_SUM_MINUTE]			
0942: 53 B1    MOV   [iles+162],A       (0294) 	mov [dividend],A
0944: 55 B2 09 MOV   [iles+163],0x9     (0295) 	mov [divisor],09h
0947: 80 48    JMP   0x0990             (0296) 	jmp div8
0949: 51 B1    MOV   A,[iles+162]       (0297) 	mov A,[dividend]
094B: 53 AD    MOV   [iles+158],A       (0298) 	mov [TEMP_SUM_MINUTE],A				;restore Avg_min to temp_sum_min
094D: 51 AE    MOV   A,[iles+159]       (0299) 	mov A, [TEMP_SUM_SEC]
094F: 53 B1    MOV   [iles+162],A       (0300) 	mov [dividend],A
0951: 55 B2 09 MOV   [iles+163],0x9     (0301) 	mov [divisor],09h
0954: 80 3B    JMP   0x0990             (0302) 	jmp div8
0956: 51 B1    MOV   A,[iles+162]       (0303) 	mov A,[dividend]
0958: 53 AE    MOV   [iles+159],A       (0304) 	mov [TEMP_SUM_SEC],A				;restor Avg_sec to temp_sum_sec
                                        (0305) 	_start_memory_display:
                                        (0306) 	;short button press->display Avg time
095A: 8F 26    JMP   0x0881             (0307) 	jmp CHECK_ShortPress
095C: C0 90    JC    0x09ED             (0308) 	jc	_LCD_Display_Average 
095E: DE A0    JNC   0x07FF             (0309) 	jnc FSM1
0960: 50 00    MOV   A,0x0              (0310) 	mov A,00h   						;load Row
0962: 57 01    MOV   X,0x1              (0311) 	mov X,01h   						;load column
0964: 9C 5D    CALL  0x05C3             (0312) 	call LCD_Position
0966: 50 0A    MOV   A,0xA              (0313) 	mov A,10
0968: 9B 22    CALL  0x048C             (0314) 	call LCD_WriteData	
                                        (0315) 	;short button press->display Longest time
096A: 8F 16    JMP   0x0881             (0316) 	jmp CHECK_ShortPress
096C: C0 68    JC    0x09D5             (0317) 	jc	_LCD_Display_Longest
096E: DE 90    JNC   0x07FF             (0318) 	jnc FSM1
0970: 50 00    MOV   A,0x0              (0319) 	mov A,00h   						;load Row
0972: 57 01    MOV   X,0x1              (0320) 	mov X,01h   						;load column
0974: 9C 4D    CALL  0x05C3             (0321) 	call LCD_Position
0976: 50 0A    MOV   A,0xA              (0322) 	mov A,10
0978: 9B 12    CALL  0x048C             (0323) 	call LCD_WriteData	
                                        (0324) 	;short button pressd->display Shortest time
097A: 8F 06    JMP   0x0881             (0325) 	jmp CHECK_ShortPress
097C: C0 64    JC    0x09E1             (0326) 	jc _LCD_Display_Shortest
097E: DE 80    JNC   0x07FF             (0327) 	jnc	FSM1
0980: 50 00    MOV   A,0x0              (0328) 	mov A,00h   						;load Row
0982: 57 01    MOV   X,0x1              (0329) 	mov X,01h   						;load column
0984: 9C 3D    CALL  0x05C3             (0330) 	call LCD_Position
0986: 50 0A    MOV   A,0xA              (0331) 	mov A,10
0988: 9B 02    CALL  0x048C             (0332) 	call LCD_WriteData	
                                        (0333) 	;short button pressd->display Shortest time
098A: 8E F6    JMP   0x0881             (0334) 	jmp CHECK_ShortPress
098C: CF CD    JC    0x095A             (0335) 	jc	_start_memory_display
098E: DE 70    JNC   0x07FF             (0336) 	jnc	FSM1	
                                        (0337) 
                                        (0338) div8:
0990: 55 B0 00 MOV   [iles+161],0x0     (0339) 	mov [remainder],00h 				;initialize remainder to 0
0993: 70 FB    AND   F,0xFB             (0340) 	and F,fbh 							;clear carry bit in flags
0995: 55 B4 08 MOV   [iles+165],0x8     (0341) 	mov [lcount],8 				;set loop counter to 8
                                        (0342) d8u_1:
0998: 6B B1    RLC   [iles+162]         (0343) 	rlc [dividend] 					;shift MSB of dividend to LSB of remainder
099A: 6B B0    RLC   [iles+161]         (0344) 	rlc [remainder] 					; continued
099C: 5F B3 B0 MOV   [iles+164],[iles+161](0345) 	mov [temp],[remainder] 			;store remainder
099F: 51 B0    MOV   A,[iles+161]       (0346) 	mov a,[remainder] 				;subtract divisor from remainder
09A1: 12 B2    SUB   A,[iles+163]       (0347) 	sub a,[divisor] 					;continued
09A3: 53 B0    MOV   [iles+161],A       (0348) 	mov [remainder],a 				;continued
09A5: D0 09    JNC   0x09AF             (0349) 	jnc d8u_2 							;jump if result was positive
09A7: 5F B0 B3 MOV   [iles+161],[iles+164](0350) 	mov [remainder],[temp] 			;restore remainder
09AA: 26 B1 FE AND   [iles+162],0xFE    (0351) 	and [dividend],feh 				;clear LSB of dividend
09AD: 80 04    JMP   0x09B2             (0352) 	jmp chkLcount8 						;jump to loop counter decrement
                                        (0353) d8u_2:
09AF: 2E B1 01 OR    [iles+162],0x1     (0354) 	or [dividend],01h 				;set dividend LSB to 1
                                        (0355) chkLcount8:
09B2: 7A B4    DEC   [iles+165]         (0356) 	dec [lcount] 						;decrement loop counter
09B4: BF E3    JNZ   0x0998             (0357) 	jnz d8u_1 							;repeat steps if loop counter not zero
                                        (0358) ;division complete
                                        (0359) 
                                        (0360) _button_press:
09B6: 55 B5 00 MOV   [iles+166],0x0     (0361) 	mov [PRESS_INTERUPTNO],00h
09B9: 5D 08    MOV   A,REG[0x8]         (0362) 	mov A,REG[PRT2DR]  					;get the input button press for port2
09BB: 21 80    AND   A,0x80             (0363) 	and A,BUTTON_MSK     				;get pin7 value, button_msk=10000000
09BD: AF F8    JZ    0x09B6             (0364) 	jz	_button_press					;if pin7=1,start to count, counter perio=250
09BF: 90 11    CALL  0x09D2             (0365) 	call _start_counter
09C1: 70 F9    AND   F,0xF9             (0366) 	and  F,F9h   						;initalize C and Z flag to 0
                                        (0367) 	wait_release:
09C3: 5D 08    MOV   A,REG[0x8]         (0368) 	mov A,REG[PRT2DR]
09C5: 21 80    AND   A,0x80             (0369) 	and A,BUTTON_MSK 					;check if press has been losen, that is pin=0
09C7: BF FB    JNZ   0x09C3             (0370) 	jnz wait_release
09C9: 90 04    CALL  0x09CF             (0371) 	call _stop_counter					;if the pin=0, stop counting
09CB: 7F       RET                      (0372) 	ret
                                        (0373) 
                                        (0374) _inc_press_interuptNo:
09CC: 76 B5    INC   [iles+166]         (0375) 	INC [PRESS_INTERUPTNO]  			;INC interuptNO
09CE: 7F       RET                      (0376) 	ret
                                        (0377) _stop_counter:
09CF: 9D 57    CALL  0x0728             (0378) 	call Counter8_1_Stop
09D1: 7F       RET                      (0379) 	ret
                                        (0380) _start_counter:
09D2: 9D 50    CALL  0x0724             (0381) 	call Counter8_1_Start
09D4: 7F       RET                      (0382) 	ret
                                        (0383) 
                                        (0384) 
                                        (0385) _LCD_Display_Longest:     //used to display Avg,Longest,Shortest time
09D5: 50 00    MOV   A,0x0              (0386) 	mov A,00h   						;load Row
09D7: 57 00    MOV   X,0x0              (0387) 	mov X,00h   						;load column
09D9: 9B E8    CALL  0x05C3             (0388) 	call LCD_Position
09DB: 50 07    MOV   A,0x7              (0389) 	mov A,>Longest  					;Load MSB part of pointer
09DD: 57 66    MOV   X,0x66             (0390) 	mov X,<Longest  					;load LSB part of pointer
09DF: 9A 5D    CALL  0x043E             (0391) 	call LCD_PrCString    				;display string at current LCD Cursion position
                                        (0392) 	
                                        (0393) _LCD_Display_Shortest:     //used to display Avg,Longest,Shortest time
09E1: 50 00    MOV   A,0x0              (0394) 	mov A,00h   						;load Row
09E3: 57 00    MOV   X,0x0              (0395) 	mov X,00h   						;load column
09E5: 9B DC    CALL  0x05C3             (0396) 	call LCD_Position
09E7: 50 07    MOV   A,0x7              (0397) 	mov A,>Shortest  					;Load MSB part of pointer
09E9: 57 82    MOV   X,0x82             (0398) 	mov X,<Shortest  					;load LSB part of pointer
09EB: 9A 51    CALL  0x043E             (0399) 	call LCD_PrCString    				;display string at current LCD Cursion position
                                        (0400) 	
                                        (0401) _LCD_Display_Average:     //used to display Avg,Longest,Shortest time
09ED: 50 01    MOV   A,0x1              (0402) 	mov A,01h   						;load Row
09EF: 57 06    MOV   X,0x6              (0403) 	mov X,06h   						;load column
09F1: 9B D0    CALL  0x05C3             (0404) 	call LCD_Position
09F3: 50 07    MOV   A,0x7              (0405) 	mov A,>Avg  						;Load MSB part of pointer
09F5: 57 74    MOV   X,0x74             (0406) 	mov X,<Avg 							;load LSB part of pointer
09F7: 9A 45    CALL  0x043E             (0407) 	call LCD_PrCString    				;display string at current LCD Cursion position
09F9: 7F       RET                      (0408) 	ret
                                        (0409) 	
                                        (0410) _LCD_Display_Idle:     //used to display Avg,Longest,Shortest time
09FA: 50 01    MOV   A,0x1              (0411) 	mov A,01h   						;load Row
09FC: 57 00    MOV   X,0x0              (0412) 	mov X,00h   						;load column
09FE: 9B C3    CALL  0x05C3             (0413) 	call LCD_Position
0A00: 50 07    MOV   A,0x7              (0414) 	mov A,>IDLE  						;Load MSB part of pointer
0A02: 57 91    MOV   X,0x91             (0415) 	mov X,<IDLE  						;load LSB part of pointer
0A04: 9A 38    CALL  0x043E             (0416) 	call LCD_PrCString    				;display string at current LCD Cursion position	
0A06: 7F       RET                      (0417) 	ret
                                        (0418) 	
                                        (0419) _LCD_Display_Sensitity:     //used to display Avg,Longest,Shortest time
0A07: 50 00    MOV   A,0x0              (0420) 	mov A,00h   						;load Row
0A09: 57 00    MOV   X,0x0              (0421) 	mov X,00h   						;load column
0A0B: 9B B6    CALL  0x05C3             (0422) 	call LCD_Position
0A0D: 50 07    MOV   A,0x7              (0423) 	mov A,>SENSE_MODE  						;Load MSB part of pointer
0A0F: 57 96    MOV   X,0x96             (0424) 	mov X,<SENSE_MODE 						;load LSB part of pointer
0A11: 9A 2B    CALL  0x043E             (0425) 	call LCD_PrCString    				;display string at current LCD Cursion position
0A13: 7F       RET                      (0426) 	ret
                                        (0427) 	
                                        (0428) _LCD_Display_Accuracy:     //used to display Avg,Longest,Shortest time
0A14: 50 00    MOV   A,0x0              (0429) 	mov A,00h   						;load Row
0A16: 57 00    MOV   X,0x0              (0430) 	mov X,00h   						;load column
0A18: 9B A9    CALL  0x05C3             (0431) 	call LCD_Position
0A1A: 50 07    MOV   A,0x7              (0432) 	mov A,>ACCRUARY_MODE  						;Load MSB part of pointer
0A1C: 57 A7    MOV   X,0xA7             (0433) 	mov X,<ACCRUARY_MODE  						;load LSB part of pointer
0A1E: 9A 1E    CALL  0x043E             (0434) 	call LCD_PrCString    				;display string at current LCD Cursion position
0A20: 7F       RET                      (0435) 	ret
                                        (0436) 	
                                        (0437) _LCD_Display_Measurement:     //used to display Avg,Longest,Shortest time
0A21: 50 00    MOV   A,0x0              (0438) 	mov A,00h   						;load Row
0A23: 57 00    MOV   X,0x0              (0439) 	mov X,00h   						;load column
0A25: 9B 9C    CALL  0x05C3             (0440) 	call LCD_Position
0A27: 50 07    MOV   A,0x7              (0441) 	mov A,>MEASURE_MODE  						;Load MSB part of pointer
0A29: 57 B5    MOV   X,0xB5             (0442) 	mov X,<MEASURE_MODE  						;load LSB part of pointer
0A2B: 9A 11    CALL  0x043E             (0443) 	call LCD_PrCString    				;display string at current LCD Cursion position
0A2D: 7F       RET                      (0444) 	ret
                                        (0445) 	
                                        (0446) _LCD_Display_Memory:     //used to display Avg,Longest,Shortest time
0A2E: 50 00    MOV   A,0x0              (0447) 	mov A,00h   						;load Row
0A30: 57 00    MOV   X,0x0              (0448) 	mov X,00h   						;load column
0A32: 9B 8F    CALL  0x05C3             (0449) 	call LCD_Position
0A34: 50 07    MOV   A,0x7              (0450) 	mov A,>MEMORY_MODE  						;Load MSB part of pointer
0A36: 57 C6    MOV   X,0xC6             (0451) 	mov X,<MEMORY_MODE  						;load LSB part of pointer
0A38: 9A 04    CALL  0x043E             (0452) 	call LCD_PrCString    				;display string at current LCD Cursion position	
0A3A: 7F       RET                      (0453) 	ret
                                        (0454) 	
                                        (0455) 
                                        (0456) _LCD_Display_Time:
0A3B: 50 00    MOV   A,0x0              (0457) 	mov A,00h   						;load Row
0A3D: 57 00    MOV   X,0x0              (0458) 	mov X,00h   						;load column
0A3F: 9B 82    CALL  0x05C3             (0459) 	call LCD_Position
0A41: 51 81    MOV   A,[iles+114]       (0460) 	mov A,[SET_HOUR]
0A43: FD 8D    INDEX 0x07D2             (0461) 	index DIGITS
0A45: 9A 19    CALL  0x0460             (0462) 	call LCD_PrHexByte
                                        (0463) 	
0A47: 50 00    MOV   A,0x0              (0464) 	mov A,00h   						;load Row
0A49: 57 02    MOV   X,0x2              (0465) 	mov X,02h   						;load column
0A4B: 9B 76    CALL  0x05C3             (0466) 	call LCD_Position
0A4D: 50 0A    MOV   A,0xA              (0467) 	mov A,10
0A4F: FD 81    INDEX 0x07D2             (0468) 	index DIGITS
0A51: 9A 0D    CALL  0x0460             (0469) 	call LCD_PrHexByte
                                        (0470) 	
0A53: 50 00    MOV   A,0x0              (0471) 	mov A,00h   						;load Row
0A55: 57 03    MOV   X,0x3              (0472) 	mov X,03h   						;load column
0A57: 9B 6A    CALL  0x05C3             (0473) 	call LCD_Position
0A59: 51 8A    MOV   A,[iles+123]       (0474) 	mov A,[SET_MINUTE]
0A5B: FD 75    INDEX 0x07D2             (0475) 	index DIGITS
0A5D: 9A 01    CALL  0x0460             (0476) 	call LCD_PrHexByte	
                                        (0477) 	
0A5F: 50 00    MOV   A,0x0              (0478) 	mov A,00h   						;load Row
0A61: 57 05    MOV   X,0x5              (0479) 	mov X,05h   						;load column
0A63: 9B 5E    CALL  0x05C3             (0480) 	call LCD_Position
0A65: 50 0A    MOV   A,0xA              (0481) 	mov A,10
0A67: FD 69    INDEX 0x07D2             (0482) 	index DIGITS
0A69: 99 F5    CALL  0x0460             (0483) 	call LCD_PrHexByte
                                        (0484) 	
0A6B: 50 00    MOV   A,0x0              (0485) 	mov A,00h   						;load Row
0A6D: 57 06    MOV   X,0x6              (0486) 	mov X,06h   						;load column
0A6F: 9B 52    CALL  0x05C3             (0487) 	call LCD_Position
0A71: 51 93    MOV   A,[iles+132]       (0488) 	mov A,[SET_SEC]
0A73: FD 5D    INDEX 0x07D2             (0489) 	index DIGITS
0A75: 99 E9    CALL  0x0460             (0490) 	call LCD_PrHexByte	
                                        (0491) 	
0A77: 50 00    MOV   A,0x0              (0492) 	mov A,00h   						;load Row
0A79: 57 08    MOV   X,0x8              (0493) 	mov X,08h   						;load column
0A7B: 9B 46    CALL  0x05C3             (0494) 	call LCD_Position
0A7D: 50 0B    MOV   A,0xB              (0495) 	mov A,11
0A7F: FD 51    INDEX 0x07D2             (0496) 	index DIGITS
0A81: 99 DD    CALL  0x0460             (0497) 	call LCD_PrHexByte
0A83: 7F       RET                      (0498) 	ret
                                        (0499) 
                                        (0500) _LCD_Display_PressNo:
0A84: 50 00    MOV   A,0x0              (0501) 	mov A,00h   						;load Row
0A86: 57 00    MOV   X,0x0              (0502) 	mov X,00h   						;load column
0A88: 9B 39    CALL  0x05C3             (0503) 	call LCD_Position
0A8A: 51 B5    MOV   A,[iles+166]       (0504) 	mov A,[PRESS_INTERUPTNO]
0A8C: 99 D2    CALL  0x0460             (0505) 	call LCD_PrHexByte
0A8E: 7F       RET                      (0506) 	ret
                                        (0507) 	
                                        (0508) _LED_Display:
0A8F: 51 80    MOV   A,[iles+113]       (0509) 	mov A,[CRT_STATE]
0A91: 53 B3    MOV   [iles+164],A       (0510) 	mov [temp],A
0A93: 21 01    AND   A,0x1              (0511) 	and A,LED_MSK
0A95: 99 70    CALL  0x0407             (0512) 	call _LED_1_Switch
0A97: 51 B3    MOV   A,[iles+164]       (0513) 	mov A,[temp]
0A99: 6A       RLC   A                  (0514) 	rlc A
0A9A: 53 B3    MOV   [iles+164],A       (0515) 	mov [temp],A
0A9C: 21 01    AND   A,0x1              (0516) 	and A,LED_MSK
0A9E: 99 2A    CALL  0x03CA             (0517) 	call _LED_2_Switch
0AA0: 51 B3    MOV   A,[iles+164]       (0518) 	mov A,[temp]
0AA2: 6A       RLC   A                  (0519) 	rlc A
0AA3: 21 01    AND   A,0x1              (0520) 	and A,LED_MSK
0AA5: 98 E6    CALL  0x038D             (0521) 	call _LED_3_Switch
0AA7: 7F       RET                      (0522) 	ret
                                        (0523) 	
                                        (0524) 
                                        (0525) .terminate:
0AA8: 8F FF    JMP   0x0AA8             (0526)     jmp .terminate
(0527) 	
FILE: <library>
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2009 ImageCraft Creations Inc.
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Release version 7.02.004
